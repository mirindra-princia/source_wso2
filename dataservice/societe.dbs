<data transports="http https" serviceGroup="mg.gov.edbm.societe.societeDS" serviceNamespace="" name="societe">
  <description />
  <!-- CONFIGURATION PROD -->
  <!-- <config id="societeDS">
    <property name="driverClassName">org.postgresql.Driver</property>
    <property name="url">jdbc:postgresql://devedbmdb.cq07jvdma2am.af-south-1.rds.amazonaws.com:5432/societe</property>
    <property name="username">devedbmdb</property>
    <property name="password">devedbmdb</property>
  </config> -->
  <!-- CONFIGURATION TEST -->
  <config id="societeDS">
    <property name="driverClassName">org.postgresql.Driver</property>
    <property name="url">jdbc:postgresql://13.246.0.44:5432/societe</property>
    <property name="username">devedbmdb</property>
    <property name="password">devedbmdb</property>
  </config>
  <!-- CONFIGURATION DEV -->
  <!-- <config id="societeDS"> 
    <property name="driverClassName">org.postgresql.Driver</property>
    <property name="url">jdbc:postgresql://localhost:5432/societe</property>
    <property name="username">postgres</property>
    <property name="password">postgres</property>
  </config> -->

  <resource path="addSocietyForm" method="POST">
    <description>add society from online form</description>
    <call-query href="addSociety">
      <with-param name="   denominationSocial " query-param="   denominationSocial " />
      <with-param name=" formeJuridique" query-param=" formeJuridique" />
      <with-param name=" dateStatut" query-param=" dateStatut" />
      <with-param name="  activiteImportExport" query-param="  activiteImportExport" />
      <with-param name=" activiteIndustrielCollecteur" query-param=" activiteIndustrielCollecteur" />
      <with-param name="  objetSocial" query-param="  objetSocial" />
      <with-param name=" activiteGrossiste" query-param=" activiteGrossiste" />
      <with-param name=" autreActiviteReglemente" query-param=" autreActiviteReglemente" />
      <with-param name=" choixImposition" query-param=" choixImposition" />
      <with-param name=" nombreAssociePersPhysique" query-param=" nombreAssociePersPhysique" />
      <with-param name=" nombreAssociePersMorale" query-param=" nombreAssociePersMorale" />
      <with-param name=" nombreDirigeant" query-param=" nombreDirigeant" />
      <with-param name=" idPersonne" query-param=" idPersonne" />
      <with-param name=" capital" query-param=" capital" />
      <with-param name="idSiegeSocial" query-param="idSiegeSocial" />
      <with-param name=" activitePrincipal" query-param=" activitePrincipal" />
      <with-param name="idFormeJuridique" query-param="idFormeJuridique" />
      <with-param name="tva" query-param="tva" />
    </call-query>
  </resource>
  <resource path="addAdressSociety" method="POST">
    <description />
    <call-query href="addAdress">
      <with-param name="idFokontany" query-param="idFokontany" />
      <with-param name="idCommune" query-param="idCommune" />
      <with-param name="idDistrict" query-param="idDistrict" />
      <with-param name="idProvince" query-param="idProvince" />
      <with-param name="idRegion" query-param="idRegion" />
      <with-param name="adresse" query-param="adresse" />
      <with-param name="idArrondissement" query-param="idArrondissement" />
      <with-param name="codePays" query-param="codePays" />
      <with-param name="idVille" query-param="idVille" />
      <with-param name="longitude" query-param="longitude" />
      <with-param name="latitude" query-param="latitude" />
    </call-query>
  </resource>
  <resource path="addSiegeSocial" method="POST">
    <description />
    <call-query href="addSiegeSocial">
      <with-param name="dureebail" query-param="dureebail" />
      <with-param name="montantBail" query-param="montantBail" />
      <with-param name="adresseSiegeSocial" query-param="adresseSiegeSocial" />
      <with-param name="idTypeBailleur" query-param="idTypeBailleur" />
      <with-param name="idTypeContrat" query-param="idTypeContrat" />
      <with-param name="autorisationProp" query-param="autorisationProp" />
      <with-param name="siegePrincipal" query-param="siegePrincipal" />
      <with-param name="idBailleurPersonneMoral" query-param="idBailleurPersonneMoral" />
      <with-param name="idBailleurPersonne" query-param="idBailleurPersonne" />
      <with-param name="idTypeEtablissement" query-param="idTypeEtablissement" />
      <with-param name="debutBail" query-param="debutBail" />
    </call-query>
  </resource>
  <resource path="getTypeContrat" method="GET">
    <description />
    <call-query href="listTypeContrat" />
  </resource>
  <resource path="getTypeBailleur" method="GET">
    <description />
    <call-query href="getListTypeBailleur" />
  </resource>
  <resource path="setSocetyFolder" method="PUT">
    <description />
    <call-query href="setSocietyFolder">
      <with-param name="idDossier" query-param="idDossier" />
      <with-param name="idSociete" query-param="idSociete" />
    </call-query>
  </resource>
  <resource path="getSocietyByFolderId" method="GET">
    <description />
    <call-query href="getSocietyByFolderId">
      <with-param name="idDossier" query-param="idDossier" />
    </call-query>
  </resource>
  <resource path="getSiegeSocial" method="GET">
    <description />
    <call-query href="getSiegeSocial">
      <with-param name="idSiege" query-param="idSiege" />
    </call-query>
  </resource>
  <resource path="getAddressById" method="GET">
    <description />
    <call-query href="getAddressById">
      <with-param name="idAdresse" query-param="idAdresse" />
    </call-query>
  </resource>
  <resource path="updateSociety" method="PUT">
    <description />
    <call-query href="updateSociety">
      <with-param name="   denominationSocial " query-param="   denominationSocial " />
      <with-param name=" formeJuridique" query-param=" formeJuridique" />
      <with-param name=" dateStatut" query-param=" dateStatut" />
      <with-param name="  activiteImportExport" query-param="  activiteImportExport" />
      <with-param name=" activiteIndustrielCollecteur" query-param=" activiteIndustrielCollecteur" />
      <with-param name="  objetSocial" query-param="  objetSocial" />
      <with-param name=" activiteGrossiste" query-param=" activiteGrossiste" />
      <with-param name=" autreActiviteReglemente" query-param=" autreActiviteReglemente" />
      <with-param name=" choixImposition" query-param=" choixImposition" />
      <with-param name=" nombreAssociePersPhysique" query-param=" nombreAssociePersPhysique" />
      <with-param name=" nombreAssociePersMorale" query-param=" nombreAssociePersMorale" />
      <with-param name=" nombreDirigeant" query-param=" nombreDirigeant" />
      <with-param name=" idPersonne" query-param=" idPersonne" />
      <with-param name=" capital" query-param=" capital" />
      <with-param name="idSiegeSocial" query-param="idSiegeSocial" />
      <with-param name=" activitePrincipal" query-param=" activitePrincipal" />
      <with-param name="idFormeJuridique" query-param="idFormeJuridique" />
      <with-param name="idSociete" query-param="idSociete" />
      <with-param name="tva" query-param="tva" />
    </call-query>
  </resource>
  <resource path="updateAdress" method="PUT">
    <description />
    <call-query href="updateAdress">
      <with-param name="idFokontany" query-param="idFokontany" />
      <with-param name="idCommune" query-param="idCommune" />
      <with-param name="idDistrict" query-param="idDistrict" />
      <with-param name="idProvince" query-param="idProvince" />
      <with-param name="idRegion" query-param="idRegion" />
      <with-param name="adresse" query-param="adresse" />
      <with-param name="idArrondissement" query-param="idArrondissement" />
      <with-param name="codePays" query-param="codePays" />
      <with-param name="idVille" query-param="idVille" />
      <with-param name="idAdresse" query-param="idAdresse" />
      <with-param name="longitude" query-param="longitude" />
      <with-param name="latitude" query-param="latitude" />
    </call-query>
  </resource>
  <resource path="updateSiegeSocial" method="PUT">
    <description />
    <call-query href="updateSiegeSocial">
      <with-param name="dureebail" query-param="dureebail" />
      <with-param name="adresseSiegeSocial" query-param="adresseSiegeSocial" />
      <with-param name="idTypeBailleur" query-param="idTypeBailleur" />
      <with-param name="idTypeContrat" query-param="idTypeContrat" />
      <with-param name="autorisationProp" query-param="autorisationProp" />
      <with-param name="siegePrincipal" query-param="siegePrincipal" />
      <with-param name="idBailleurPersonneMoral" query-param="idBailleurPersonneMoral" />
      <with-param name="idBailleurPersonne" query-param="idBailleurPersonne" />
      <with-param name="montantBail" query-param="montantBail" />
      <with-param name="idSiege" query-param="idSiege" />
      <with-param name="idTypeEtablissement" query-param="idTypeEtablissement" />
      <with-param name="debutBail" query-param="debutBail" />
    </call-query>
  </resource>
  <resource path="addCompany" method="POST">
    <description>adding company 3rd iteration </description>
    <call-query href="addCompany">
      <with-param name="formeJuridique" query-param="formeJuridique" />
      <with-param name="idFormeJuridique" query-param="idFormeJuridique" />
      <with-param name="denominationSocial" query-param="denominationSocial" />
      <with-param name="nomCommercial" query-param="nomCommercial" />
      <with-param name="sigle" query-param="sigle" />
      <with-param name="objetSocial" query-param="objetSocial" />
      <with-param name="idSecteurActivite" query-param="idSecteurActivite" />
      <with-param name="activitePrincipal" query-param="activitePrincipal" />
      <with-param name="activiteImportExport" query-param="activiteImportExport" />
      <with-param name="activiteIndustrielCollecteur" query-param="activiteIndustrielCollecteur" />
      <with-param name="activiteGrossiste" query-param="activiteGrossiste" />
      <with-param name="capital" query-param="capital" />
      <with-param name="montantPartSocial" query-param="montantPartSocial" />
      <with-param name="choixImposition" query-param="choixImposition" />
      <with-param name="tva" query-param="tva" />
      <with-param name="duree" query-param="duree" />
      <with-param name="finExerciceSocial" query-param="finExerciceSocial" />
      <with-param name="dateStatut" query-param="dateStatut" />
      <with-param name="idPersonne" query-param="idPersonne" />
      <with-param name="idDossier" query-param="idDossier" />
      <with-param name="idDevise" query-param="idDevise" />
      <with-param name="idDevisePartAssocie" query-param="idDevisePartAssocie" />
    </call-query>
  </resource>
  <resource path="updateCompany" method="PUT">
    <description>update Company 3rd iteration</description>
    <call-query href="updateCompany">
      <with-param name="formeJuridique" query-param="formeJuridique" />
      <with-param name="idFormeJuridique" query-param="idFormeJuridique" />
      <with-param name="denominationSocial" query-param="denominationSocial" />
      <with-param name="nomCommercial" query-param="nomCommercial" />
      <with-param name="sigle" query-param="sigle" />
      <with-param name="objetSocial" query-param="objetSocial" />
      <with-param name="idSecteurActivite" query-param="idSecteurActivite" />
      <with-param name="activitePrincipal" query-param="activitePrincipal" />
      <with-param name="activiteImportExport" query-param="activiteImportExport" />
      <with-param name="activiteIndustrielCollecteur" query-param="activiteIndustrielCollecteur" />
      <with-param name="activiteGrossiste" query-param="activiteGrossiste" />
      <with-param name="capital" query-param="capital" />
      <with-param name="montantPartSocial" query-param="montantPartSocial" />
      <with-param name="choixImposition" query-param="choixImposition" />
      <with-param name="tva" query-param="tva" />
      <with-param name="duree" query-param="duree" />
      <with-param name="finExerciceSocial" query-param="finExerciceSocial" />
      <with-param name="idSociete" query-param="idSociete" />
      <with-param name="dateStatut" query-param="dateStatut" />
      <with-param name="idSiegeSocial" query-param="idSiegeSocial" />
      <with-param name="idDevise" query-param="idDevise" />
      <with-param name="idDevisePartAssocie" query-param="idDevisePartAssocie" />
    </call-query>
  </resource>
  <resource path="getCompany" method="GET">
    <description>getCompany for update 3rd iteration</description>
    <call-query href="getCompany">
      <with-param name="idSociete" query-param="idSociete" />
    </call-query>
  </resource>
  <resource path="addCompanyAssociate" method="POST">
    <description />
    <call-query href="addCompanyAssociate">
      <with-param name="idSociete" query-param="idSociete" />
      <with-param name="idAssocie" query-param="idAssocie" />
      <with-param name="isDefault" query-param="isDefault" />
    </call-query>
  </resource>
  <resource path="addAssociate" method="POST">
    <description />
    <call-query href="addAssociate">
      <with-param name="partCapitalAssocie" query-param="partCapitalAssocie" />
      <with-param name="idPersonne" query-param="idPersonne" />
      <with-param name="engagement" query-param="engagement" />
      <with-param name="idTypeAssocie" query-param="idTypeAssocie" />
      <with-param name="apportNature" query-param="apportNature" />
      <with-param name="idPersonneMoral" query-param="idPersonneMoral" />
      <with-param name="idStatutSociete" query-param="idStatutSociete" />
      <with-param name="gerantStatutaire" query-param="gerantStatutaire" />
      <with-param name="idDevise" query-param="idDevise" />
      <with-param name="descriptifApportEnNature" query-param="descriptifApportEnNature" />
      <with-param name="idDeviseMontantApportEnNature" query-param="idDeviseMontantApportEnNature" />
      <with-param name="montantApportEnNature" query-param="montantApportEnNature" />
    </call-query>
  </resource>
  <resource path="getCompanyInformationByPersonId" method="GET">
    <description />
    <call-query href="getCompanyInformationByPersonId">
      <with-param name="idPersonne" query-param="idPersonne" />
    </call-query>
  </resource>
  <resource path="deleteCompany" method="DELETE">
    <description />
    <call-query href="deleteCompany">
      <with-param name="idSociete" query-param="idSociete" />
    </call-query>
  </resource>
  <resource path="getActivitySector" method="GET">
    <description />
    <call-query href="getActivitySector" />
  </resource>
  <resource path="getAssociateByCompanyId" method="GET">
    <description />
    <call-query href="getAssociateByCompanyId">
      <with-param name="idSociete " query-param="idSociete " />
    </call-query>
  </resource>
  <resource path="getExploitationPlace" method="GET">
    <description />
    <call-query href="getExploitationPlace">
      <with-param name="siegePrincipal" query-param="siegePrincipal" />
    </call-query>
  </resource>
  <resource path="getGreffeCode" method="GET">
    <description />
    <call-query href="getGreffeCode">
      <with-param name="idDistrict" query-param="idDistrict" />
    </call-query>
  </resource>
  <resource path="getBusinessPlaces" method="GET">
    <description />
    <call-query href="getBusinessPlaces">
      <with-param name="id" query-param="id" />
    </call-query>
  </resource>
  <resource path="getDefaultAssociateByCompanyId" method="GET">
    <description />
    <call-query href="getDefaultAssociateByCompanyId">
      <with-param name="idSociete " query-param="idSociete " />
    </call-query>
  </resource>
  <resource path="deleteCompanyAssociate" method="DELETE">
    <description />
    <call-query href="deleteCompanyAssociate">
      <with-param name="idAssocie" query-param="idAssocie" />
    </call-query>
  </resource>
  <resource path="deleteAssociate" method="DELETE">
    <description />
    <call-query href="deleteAssociate">
      <with-param name="idAssocie" query-param="idAssocie" />
    </call-query>
  </resource>
  <resource path="getAssociateById" method="GET">
    <description />
    <call-query href="getAssociateById">
      <with-param name="idAssocie" query-param="idAssocie" />
    </call-query>
  </resource>
  <resource path="updateAssociate" method="PUT">
    <description />
    <call-query href="updateAssociate">
      <with-param name="idAssocie" query-param="idAssocie" />
      <with-param name="partCapitalAssocie" query-param="partCapitalAssocie" />
      <with-param name="idPersonne" query-param="idPersonne" />
      <with-param name="engagement" query-param="engagement" />
      <with-param name="idTypeAssocie" query-param="idTypeAssocie" />
      <with-param name="apportNature" query-param="apportNature" />
      <with-param name="idPersonneMoral" query-param="idPersonneMoral" />
      <with-param name="idStatutSociete" query-param="idStatutSociete" />
      <with-param name="gerantStatutaire" query-param="gerantStatutaire" />
      <with-param name="descriptifApportEnNature" query-param="descriptifApportEnNature" />
      <with-param name="montantApportEnNature" query-param="montantApportEnNature" />
      <with-param name="idDeviseMontantApportEnNature" query-param="idDeviseMontantApportEnNature" />
      <with-param name="idDevise" query-param="idDevise" />
    </call-query>
  </resource>
  <resource path="deleteSocialPlace" method="DELETE">
    <description />
    <call-query href="deleteSocialPlace">
      <with-param name="idSiege" query-param="idSiege" />
    </call-query>
  </resource>
  <resource path="deleteAdress" method="DELETE">
    <description />
    <call-query href="deleteAdress">
      <with-param name="idAdresse" query-param="idAdresse" />
    </call-query>
  </resource>
  <resource path="user/{idPersonne}/folderIds" method="GET">
    <description />
    <call-query href="userFolders">
      <with-param name="idPersonne" query-param="idPersonne" />
    </call-query>
  </resource>
  <resource path="updateNIF" method="PUT">
    <description />
    <call-query href="updateNIF">
      <with-param name="idSociete" query-param="idSociete" />
      <with-param name="NIF" query-param="NIF" />
      <with-param name="dateNIF" query-param="dateNIF" />
    </call-query>
  </resource>
  <resource path="updateSTAT" method="PUT">
    <description />
    <call-query href="updateSTAT">
      <with-param name="STAT" query-param="number" />
      <with-param name="idSociete" query-param="companyId" />
      <with-param name="dateSTAT " query-param="immatDate " />
    </call-query>
  </resource>
  <resource path="updateRCS" method="PUT">
    <description />
    <call-query href="updateRCS">
      <with-param name="RCS" query-param="number" />
      <with-param name="idSociete" query-param="companyId" />
      <with-param name="dateRCS " query-param="immatDate " />
    </call-query>
  </resource>
  <resource path="addStatutInteroperabilite" method="POST">
    <description />
    <call-query href="statutInteroperabilite">
      <with-param name="idSociete" query-param="idSociete" />
      <with-param name="INSTAT" query-param="instat" />
      <with-param name="RCS" query-param="rcs" />
      <with-param name="DGI" query-param="dgi" />
      <with-param name="EDBM" query-param="edbm" />
    </call-query>
  </resource>
  <resource path="getCreatedCompanyId" method="GET">
    <description />
    <call-query href="getCreatedCompanyId" />
  </resource>
  <resource path="setInstatInterStatus" method="PUT">
    <description />
    <call-query href="setInstatInterStatus">
      <with-param name="status" query-param="status" />
      <with-param name="idSociete" query-param="idSociete" />
    </call-query>
  </resource>
  <resource path="setRcsInterStatus" method="PUT">
    <description />
    <call-query href="setRcsInterStatus">
      <with-param name="status" query-param="status" />
      <with-param name="idSociete" query-param="idSociete" />
    </call-query>
  </resource>
  <resource path="setDgiInterStatus" method="PUT">
    <description />
    <call-query href="setDgiInterStatus">
      <with-param name="status" query-param="status" />
      <with-param name="idSociete" query-param="idSociete" />
    </call-query>
  </resource>
  <resource path="insertEmptyJustificatif" method="POST">
    <description />
    <call-query href="insertEmptyJustificatif">
      <with-param name="pathStat" query-param="pathStat" />
      <with-param name="pathRcs" query-param="pathRcs" />
      <with-param name="pathNif" query-param="pathNif" />
    </call-query>
  </resource>
  <resource path="addEnregistrementFiscale" method="POST">
    <description />
    <call-query href="addEnregistrementFiscale">
      <with-param name="dateEnregistrement" query-param="dateEnregistrement" />
      <with-param name="numeroRegistre" query-param="numeroRegistre" />
      <with-param name="numeroEnregistrement" query-param="numeroEnregistrement" />
      <with-param name="idUtilisateurAgent" query-param="idUtilisateurAgent" />
      <with-param name="montantDroit" query-param="montantDroit" />
      <with-param name="idSociete" query-param="idSociete" />
      <with-param name="idDocument" query-param="idDocument" />
      <with-param name="numeroFolio" query-param="numeroFolio" />
    </call-query>
  </resource>
  <resource path="updatePathNif" method="PUT">
    <description />
    <call-query href="updatePathNif">
      <with-param name="id" query-param="id" />
      <with-param name="pathNif" query-param="pathNif" />
    </call-query>
  </resource>
  <resource path="updatePathRcs" method="PUT">
    <description />
    <call-query href="updatePathRcs">
      <with-param name="id" query-param="id" />
      <with-param name="pathRcs" query-param="pathRcs" />
    </call-query>
  </resource>
  <resource path="updatePathStat" method="PUT">
    <description />
    <call-query href="updatePathInstat">
      <with-param name="id" query-param="id" />
      <with-param name="pathStat" query-param="pathStat" />
    </call-query>
  </resource>
  <resource path="checkStatusTable" method="GET">
    <description />
    <call-query href="checkStatusTable">
      <with-param name="idSociete" query-param="idSociete" />
    </call-query>
  </resource>
  <resource path="updateUBI" method="PUT">
    <description />
    <call-query href="updateUBI">
      <with-param name="ubi" query-param="ubi" />
      <with-param name="idSociete" query-param="idSociete" />
    </call-query>
  </resource>
  <resource path="setEdbmInterStatus" method="PUT">
    <description />
    <call-query href="setEdbmInterStatus">
      <with-param name="idsSociete" query-param="idsSociete" />
      <with-param name="status" query-param="status" />
    </call-query>
  </resource>
  <resource path="setSiteInterStatus" method="PUT">
    <description />
    <call-query href="setSiteInterStatus">
      <with-param name="idsSociete" query-param="idsSociete" />
      <with-param name="status" query-param="status" />
    </call-query>
  </resource>
  <resource path="getCreatedCompany" method="GET">
    <description />
    <call-query href="listCreatedSociety">
      <with-param name="idPersonne" query-param="idPersonne" />
      <with-param name="limit" query-param="limit" />
    </call-query>
  </resource>
  <resource path="getActiviteReglemente" method="GET">
    <description>get activity reglemente by id</description>
    <call-query href="getActiviteReglemente">
      <with-param name="id" query-param="id" />
    </call-query>
  </resource>
  <resource path="bailCalculator" method="GET">
    <description />
    <call-query href="bailCalculator">
      <with-param name="idSociete" query-param="idSociete" />
    </call-query>
  </resource>
  <resource path="exploitationBailSum" method="GET">
    <description />
    <call-query href="exploitationBailSum">
      <with-param name="idSiege" query-param="idSiege" />
      <with-param name="siegeAddress" query-param="siegeAddress" />
    </call-query>
  </resource>
  <resource path="enregistrementFiscale/{idSociete}" method="GET">
    <description />
    <call-query href="enregistrementFiscale">
      <with-param name="idSociete" query-param="idSociete" />
    </call-query>
  </resource>
  <resource path="companyAddressByCompanyId/{companyId}" method="GET">
    <description />
    <call-query href="companyAddressByCompanyId">
      <with-param name="companyId" query-param="companyId" />
    </call-query>
  </resource>
  <resource path="relative-corporates/{corporate}" method="GET">
    <description>relative corporates</description>
    <call-query href="relativeCorporate">
      <with-param name="corporate" query-param="corporate" />
    </call-query>
  </resource>
  <resource path="companyByDenomination/{denomination}" method="GET">
    <description>company by denomination</description>
    <call-query href="companyByDenomination">
      <with-param name="denomination" query-param="denomination" />
    </call-query>
  </resource>
  <resource path="companyByNif/{nif}" method="GET">
    <description>company by nif</description>
    <call-query href="companyByNif">
      <with-param name="nif" query-param="nif" />
    </call-query>
  </resource>
  <resource path="associates/filter/{companyId}/{associateType}" method="GET">
    <description>company legal person associate</description>
    <call-query href="associate-legal-persons">
      <with-param name="companyId" query-param="companyId" />
      <with-param name="associateType" query-param="associateType" />
    </call-query>
  </resource>
  <resource path="bailleurs/siege-social/filter/{companyId}/{lessorType}" method="GET">
    <description>company siege-social lessors filter</description>
    <call-query href="siege-social-lessors-filter">
      <with-param name="companyId" query-param="companyId" />
      <with-param name="lessorType" query-param="lessorType" />
    </call-query>
  </resource>
  <resource path="bailleurs/exploitation/filter/{companyId}/{lessorType}" method="GET">
    <description>company exploitation lessors filter</description>
    <call-query href="exploitation-lessors-filter">
      <with-param name="companyId" query-param="companyId" />
      <with-param name="lessorType" query-param="lessorType" />
    </call-query>
  </resource>
  <resource path="exploitation/{companyId}" method="GET">
    <description>company exploitations</description>
    <call-query href="exploitations">
      <with-param name="companyId" query-param="companyId" />
    </call-query>
  </resource>
  <resource path="societesByFormejuridique/{formeJuridique}" method="GET">
    <description>Fetch Societes by forme juridique</description>
    <call-query href="societesByFormejuridique">
      <with-param name="formeJuridique" query-param="formeJuridique" />
    </call-query>
  </resource>
  <resource path="companyByFolderIds/{idDossier}" method="GET">
    <description>Fetch Facture by folders ids</description>
    <call-query href="companyByFolderIds">
      <with-param name="idDossier" query-param="idDossier" />
    </call-query>
  </resource>

  <query id="addSociety" useConfig="societeDS">
    <sql>INSERT INTO public.societe(
	 "denominationSocial" , "activitePrincipal", "formeJuridique", "dateStatut", capital,  "activiteImportExport", "activiteIndustrielCollecteur",  "objetSocial", "activiteGrossiste", "autreActiviteReglemente", "choixImposition", "nombreAssociePersPhysique", "nombreAssociePersMorale", "nombreDirigeant", "idPersonne","idSiegeSocial","idFormeJuridique",tva)
	VALUES (:denominationSocial, :activitePrincipal, :formeJuridique, :dateStatut, :capital, :activiteImportExport, :activiteIndustrielCollecteur, :objetSocial, :activiteGrossiste, :autreActiviteReglemente, :choixImposition, :nombreAssociePersPhysique, :nombreAssociePersMorale, :nombreDirigeant,:idPersonne,:idSiegeSocial,:idFormeJuridique,:tva) RETURNING "idSociete";</sql>
    <param name="   denominationSocial " sqlType="STRING" paramType="SCALAR" />
    <param name=" formeJuridique" sqlType="STRING" paramType="SCALAR" />
    <param name=" dateStatut" sqlType="DATE" paramType="SCALAR" />
    <param name="  activiteImportExport" sqlType="INTEGER" paramType="SCALAR" />
    <param name=" activiteIndustrielCollecteur" sqlType="INTEGER" paramType="SCALAR" />
    <param name="  objetSocial" sqlType="STRING" paramType="SCALAR" />
    <param name=" activiteGrossiste" sqlType="INTEGER" paramType="SCALAR" />
    <param name=" autreActiviteReglemente" sqlType="INTEGER" paramType="SCALAR" />
    <param name=" choixImposition" sqlType="INTEGER" paramType="SCALAR" />
    <param name=" nombreAssociePersPhysique" sqlType="INTEGER" paramType="SCALAR" />
    <param name=" nombreAssociePersMorale" sqlType="INTEGER" paramType="SCALAR" />
    <param name=" nombreDirigeant" sqlType="INTEGER" paramType="SCALAR" />
    <param name=" idPersonne" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name=" capital" sqlType="DOUBLE" paramType="SCALAR" />
    <param type="IN" name="idSiegeSocial" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name=" activitePrincipal" sqlType="STRING" paramType="SCALAR" />
    <param type="IN" name="idFormeJuridique" sqlType="INTEGER" paramType="SCALAR" />
    <param name=" tva" sqlType="INTEGER" paramType="SCALAR" />
    <result outputType="json">{"idSocietes":{"idSociete":"$idSociete"}}</result>
  </query>
  <query id="updateSociety" useConfig="societeDS">
    <sql>UPDATE  public.societe SET 
	 "denominationSocial"=:denominationSocial , "activitePrincipal"=:activitePrincipal, "formeJuridique"=:formeJuridique, "dateStatut"=:dateStatut, capital=:capital,  "activiteImportExport"=:activiteImportExport, "activiteIndustrielCollecteur"=:activiteIndustrielCollecteur,  "objetSocial"=:objetSocial, "activiteGrossiste"=:activiteGrossiste, "autreActiviteReglemente"=:autreActiviteReglemente, "choixImposition"=:choixImposition, "nombreAssociePersPhysique"=:nombreAssociePersPhysique, "nombreAssociePersMorale"=:nombreAssociePersMorale, "nombreDirigeant"=:nombreDirigeant, "idPersonne"=:idPersonne,"idSiegeSocial"=:idSiegeSocial,"idFormeJuridique"=:idFormeJuridique,"tva"=:tva
	  WHERE "idSociete"=:idSociete</sql>
    <param name="   denominationSocial " sqlType="STRING" paramType="SCALAR" />
    <param name=" formeJuridique" sqlType="STRING" paramType="SCALAR" />
    <param name=" dateStatut" sqlType="DATE" paramType="SCALAR" />
    <param name="  activiteImportExport" sqlType="INTEGER" paramType="SCALAR" />
    <param name=" activiteIndustrielCollecteur" sqlType="INTEGER" paramType="SCALAR" />
    <param name="  objetSocial" sqlType="STRING" paramType="SCALAR" />
    <param name=" activiteGrossiste" sqlType="INTEGER" paramType="SCALAR" />
    <param name=" autreActiviteReglemente" sqlType="INTEGER" paramType="SCALAR" />
    <param name=" choixImposition" sqlType="INTEGER" paramType="SCALAR" />
    <param name=" nombreAssociePersPhysique" sqlType="INTEGER" paramType="SCALAR" />
    <param name=" nombreAssociePersMorale" sqlType="INTEGER" paramType="SCALAR" />
    <param name=" nombreDirigeant" sqlType="INTEGER" paramType="SCALAR" />
    <param name=" idPersonne" sqlType="INTEGER" paramType="SCALAR" />
    <param name=" tva" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name=" capital" sqlType="DOUBLE" paramType="SCALAR" />
    <param type="IN" name="idSiegeSocial" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name=" activitePrincipal" sqlType="STRING" paramType="SCALAR" />
    <param type="IN" name="idSociete" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="idFormeJuridique" sqlType="INTEGER" paramType="SCALAR" />
  </query>
  <query id="addAdress" useConfig="societeDS">
    <sql>INSERT INTO public.adresse(
	 "idFokontany", "idCommune", "idDistrict", "idProvince", "idRegion", adresse, "idArrondissement", "codePays",longitude,latitude,"idVille")
	VALUES (:idFokontany, :idCommune, :idDistrict, :idProvince, :idRegion, :adresse, :idArrondissement, :codePays,:longitude,:latitude,:idVille)RETURNING "idAdresse";</sql>
    <param type="IN" name="idFokontany" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="idCommune" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="idDistrict" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="idProvince" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="idRegion" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="adresse" sqlType="STRING" paramType="SCALAR" optional="false" />
    <param type="IN" name="idArrondissement" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="codePays" sqlType="STRING" paramType="SCALAR" optional="true" />
    <param type="IN" name="idVille" sqlType="INTEGER" paramType="SCALAR" optional="true" />
    <param type="IN" name="longitude" sqlType="STRING" paramType="SCALAR" optional="true" />
    <param type="IN" name="latitude" sqlType="STRING" paramType="SCALAR" optional="true" />
    <result outputType="json">{"idAdresses":{"idAdresse":$idAdresse}}</result>
  </query>
  <query id="updateAdress" useConfig="societeDS">
    <sql>
        UPDATE public.adresse
        SET  "idFokontany"=:idFokontany, "idCommune"=:idCommune, "idRegion"=:idRegion, "idDistrict"=:idDistrict, "idArrondissement"=:idArrondissement, adresse=:adresse, "idProvince"=:idProvince, "codePays" = :codePays, "idVille" = :idVille, longitude= :longitude, latitude= :latitude 
        WHERE "idAdresse"=:idAdresse RETURNING "idAdresse"
    </sql>
    <param type="IN" name="idFokontany" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="idCommune" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="idDistrict" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="idProvince" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="idRegion" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="adresse" sqlType="STRING" paramType="SCALAR" optional="false" />
    <param type="IN" name="idArrondissement" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="idVille" sqlType="INTEGER" paramType="SCALAR" optional="true" />
    <param type="IN" name="idAdresse" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="longitude" sqlType="STRING" paramType="SCALAR" optional="true" />
    <param type="IN" name="latitude" sqlType="STRING" paramType="SCALAR" optional="true" />
    <param type="IN" name="codePays" sqlType="STRING" paramType="SCALAR" optional="false" />
    <result outputType="json">{"adresse":{"idAdresse":$idAdresse}}</result>
  </query>
  <query id="addSiegeSocial" useConfig="societeDS">
    <sql>INSERT INTO public."siegeSocial"(
  dureebail, "montantBail",  "adresseSiegeSocial", "idTypeBailleur", "idTypeContrat","autorisationProp","idBailleurPersonne","idBailleurPersonneMoral","siegePrincipal", "idTypeEtablissement", "debutBail")
	VALUES (  :dureebail, :montantBail, :adresseSiegeSocial, :idTypeBailleur, :idTypeContrat,:autorisationProp,:idBailleurPersonne,:idBailleurPersonneMoral,:siegePrincipal, :idTypeEtablissement, :debutBail) RETURNING "idSiege";</sql>
    <param type="IN" name="dureebail" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="adresseSiegeSocial" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="idTypeBailleur" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="idTypeContrat" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="autorisationProp" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="siegePrincipal" sqlType="INTEGER" paramType="SCALAR" optional="true" />
    <param type="IN" name="idBailleurPersonneMoral" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="idBailleurPersonne" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="montantBail" sqlType="DOUBLE" paramType="SCALAR" optional="false" />
    <param type="IN" name="idTypeEtablissement" sqlType="INTEGER" paramType="SCALAR" optional="true" />
    <param type="IN" name="debutBail" sqlType="DATE" paramType="SCALAR" optional="true" />
    <result outputType="json">{"idSiege":{"idSiege":$idSiege}}</result>
  </query>
  <query id="updateSiegeSocial" useConfig="societeDS">
    <sql>UPDATE public."siegeSocial" SET
  dureebail=:dureebail, "montantBail"=:montantBail, "adresseSiegeSocial"=:adresseSiegeSocial, "idTypeBailleur"=:idTypeBailleur, "idTypeContrat"=:idTypeContrat,"autorisationProp"=:autorisationProp,"idBailleurPersonne"=:idBailleurPersonne,
  "idBailleurPersonneMoral"=:idBailleurPersonneMoral,"siegePrincipal"=:siegePrincipal, "idTypeEtablissement"= :idTypeEtablissement, "debutBail"=:debutBail
  WHERE "idSiege"=:idSiege</sql>
    <param type="IN" name="dureebail" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="adresseSiegeSocial" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="idTypeBailleur" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="idTypeContrat" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="autorisationProp" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="siegePrincipal" sqlType="INTEGER" paramType="SCALAR" optional="true" />
    <param type="IN" name="idBailleurPersonneMoral" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="idBailleurPersonne" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="montantBail" sqlType="DOUBLE" paramType="SCALAR" optional="false" />
    <param type="IN" name="idSiege" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="idTypeEtablissement" sqlType="INTEGER" paramType="SCALAR" optional="true" />
    <param type="IN" name="debutBail" sqlType="DATE" paramType="SCALAR" optional="true" />
  </query>
  <query id="getListTypeBailleur" useConfig="societeDS">
    <sql>SELECT "idTypeBailleur", "nomTypeBailleur"
	FROM public."typeBailleur";</sql>
    <result outputType="json">{"listeTypeBailleurs":{"typeBailleur":[{"idTypeBailleur":"$idTypeBailleur","nomTypeBailleur":"$nomTypeBailleur"}]}}</result>
  </query>
  <query id="listTypeContrat" useConfig="societeDS">
    <sql>SELECT "idTypeContrat", "nomTypeContrat"
	FROM public."typeContrat";</sql>
    <result outputType="json">{"listeTypeContrats":{"typeContrat":[{"idTypeContrat":"$idTypeContrat","nomTypeContrat":"$nomTypeContrat"}]}}</result>
  </query>
  <query id="setSocietyFolder" useConfig="societeDS">
    <sql>UPDATE public.societe
	SET   "idDossier"=:idDossier
	WHERE  "idSociete"=:idSociete</sql>
    <param type="IN" name="idDossier" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="idSociete" sqlType="INTEGER" paramType="SCALAR" />
  </query>
  <query id="getSocietyByFolderId" useConfig="societeDS">
    <sql>SELECT * FROM public.societe WHERE "idDossier"=:idDossier</sql>
    <param type="IN" name="idDossier" sqlType="INTEGER" paramType="SCALAR" />
    <result outputType="json">{
	    "societe":{
	    	"idSociete":"$idSociete",
	        "formeJuridique": "$formeJuridique",
	        "idFormeJuridique": "$idFormeJuridique",
	        "denominationSocial": "$denominationSocial",
	        "nomCommercial": "$nomCommercial",
	        "sigle": "$sigle",
	        "objetSocial": "$objetSocial",
	        "idSecteurActivite": "$idSecteurActivite",
	        "activitePrincipal": "$activitePrincipal",
	        "activiteImportExport": "$activiteImportExport",
	        "activiteIndustrielCollecteur": "$activiteIndustrielCollecteur",
	        "activiteGrossiste": "$activiteGrossiste",
	        "capital":"$capital",
	        "montantPartSocial": "$montantPartSocial",
	        "dateStatut": "$dateStatut",
	        "choixImposition": "$choixImposition",
	        "tva":"$tva",
	        "duree":"$duree",
	        "finExerciceSocial": "$finExerciceSocial",
	        "idPersonne": "$idPersonne",
	        "idDossier": "$idDossier",
	        "idSiegeSocial": "$idSiegeSocial",
	        "idDevise": "$idDevise",
	        "idDevisePartAssocie": "$idDevisePartAssocie",
	        "NIF":"$NIF",
	        "dateNIF":"$dateNIF",
	        "STAT":"$STAT",
	        "RCS":"$RCS",
	        "dateSTAT":"$dateSTAT",
	        "dateRCS":"$dateRCS",
	        "labelDevise":"$labelDevise",
	        "ubi":"$ubi",
	        "activiteSecondaire": "$activiteSecondaire"
	    }
    }
    </result>
  </query>
  <query id="getSiegeSocial" useConfig="societeDS">
    <sql>SELECT *	FROM public."siegeSocial" siege LEFT JOIN adresse on adresse."idAdresse"=siege."adresseSiegeSocial" WHERE "idSiege"=:idSiege</sql>
    <param type="IN" name="idSiege" sqlType="INTEGER" paramType="SCALAR" />
    <result outputType="json">{"siegeSocial":{"idSiege":"$idSiege","dureebail":"$dureebail","montantBail":"$montantBail","adresseSiegeSocial":"$adresseSiegeSocial","idTypeBailleur":"$idTypeBailleur","idTypeContrat":"$idTypeContrat",
    "idBailleurPersonne":"$idBailleurPersonne", "idBailleurPersonneMoral":"$idBailleurPersonneMoral", "idTypeEtablissement":$idTypeEtablissement, "debutBail":"$debutBail", "autorisationProp":"$autorisationProp", "siegePrincipal":"$siegePrincipal", "adresse": {
	    	"idAdresse":"$idAdresse",
	    	"idFokontany":"$idFokontany",
	    	"idCommune":"$idCommune",
	    	"idRegion":"$idRegion",
	    	"idDistrict":"$idDistrict",
	    	"idArrondissement":"$idArrondissement",
	    	"adresse":"$adresse",
	    	"idProvince":"$idProvince",
	    	"codePays":"$codePays",
	    	"idVille":"$idVille"
	    }

}}</result>
  </query>
  <query id="getAddressById" useConfig="societeDS">
    <sql>SELECT "idAdresse", "idFokontany", "idCommune", "idDistrict", "idProvince", "idRegion", adresse, "idArrondissement","codePays"
	FROM public.adresse WHERE "idAdresse"=:idAdresse</sql>
    <param type="IN" name="idAdresse" sqlType="INTEGER" paramType="SCALAR" />
    <result outputType="json">{"adresse":{"idAdresse":$idAdresse,"idFokontany":$idFokontany,"idCommune":$idCommune,"idDistrict":$idDistrict,"idProvince":$idProvince,"idRegion":$idRegion,"adresse":$adresse,"idArrondissement":$idArrondissement,"codePays":"$codePays"}}</result>
  </query>
  <query id="addCompany" useConfig="societeDS">
    <sql>INSERT INTO public.societe(
    "formeJuridique","idFormeJuridique","denominationSocial","nomCommercial",sigle,"objetSocial","idSecteurActivite","activitePrincipal", "activiteImportExport", "activiteIndustrielCollecteur", "activiteGrossiste",capital,"montantPartSocial","dateStatut","choixImposition",tva,duree,"finExerciceSocial","idPersonne","idDossier","idDevise","idDevisePartAssocie")
	VALUES (
    :formeJuridique,:idFormeJuridique,:denominationSocial,:nomCommercial,:sigle,:objetSocial,:idSecteurActivite,:activitePrincipal, :activiteImportExport, :activiteIndustrielCollecteur, :activiteGrossiste,:capital,:montantPartSocial,:dateStatut,:choixImposition,:tva,:duree,:finExerciceSocial,:idPersonne,:idDossier,:idDevise,:idDevisePartAssocie) RETURNING "idSociete","idDossier";</sql>
    <param type="IN" name="formeJuridique" sqlType="STRING" paramType="SCALAR" />
    <param type="IN" name="idFormeJuridique" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="denominationSocial" sqlType="STRING" paramType="SCALAR" />
    <param type="IN" name="nomCommercial" sqlType="STRING" paramType="SCALAR" />
    <param type="IN" name="sigle" sqlType="STRING" paramType="SCALAR" />
    <param type="IN" name="objetSocial" sqlType="STRING" paramType="SCALAR" />
    <param type="IN" name="idSecteurActivite" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="activitePrincipal" sqlType="STRING" paramType="SCALAR" />
    <param type="IN" name="activiteImportExport" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="activiteIndustrielCollecteur" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="activiteGrossiste" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="capital" sqlType="DOUBLE" paramType="SCALAR" />
    <param type="IN" name="montantPartSocial" sqlType="DOUBLE" paramType="SCALAR" />
    <param type="IN" name="choixImposition" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="tva" sqlType="INTEGER" paramType="SCALAR" optional="true" />
    <param type="IN" name="duree" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="finExerciceSocial" sqlType="DATE" paramType="SCALAR" />
    <param type="IN" name="dateStatut" sqlType="DATE" paramType="SCALAR" />
    <param type="IN" name="idPersonne" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="idDossier" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="idDevise" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="idDevisePartAssocie" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <result outputType="json">{"idSocietes":{"idSociete":"$idSociete","idDossier":"$idDossier"}}</result>
  </query>
  <query id="updateCompany" useConfig="societeDS">
    <sql>    UPDATE public.societe
	SET  "formeJuridique"=:formeJuridique,"idFormeJuridique"=:idFormeJuridique,"denominationSocial"=:denominationSocial,"nomCommercial"=:nomCommercial,sigle=:sigle,"objetSocial"=:objetSocial,"idSecteurActivite"=:idSecteurActivite,"activitePrincipal"=:activitePrincipal, "activiteImportExport"=:activiteImportExport, "activiteIndustrielCollecteur"=:activiteIndustrielCollecteur, "activiteGrossiste"=:activiteGrossiste,capital=:capital,"montantPartSocial"=:montantPartSocial,"dateStatut"=:dateStatut,"choixImposition"=:choixImposition,tva=:tva,duree=:duree,"finExerciceSocial"=:finExerciceSocial,"idSiegeSocial"=:idSiegeSocial,"idDevise"=:idDevise,"idDevisePartAssocie"=:idDevisePartAssocie
	WHERE "idSociete"=:idSociete</sql>
    <param type="IN" name="formeJuridique" sqlType="STRING" paramType="SCALAR" />
    <param type="IN" name="idFormeJuridique" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="denominationSocial" sqlType="STRING" paramType="SCALAR" />
    <param type="IN" name="nomCommercial" sqlType="STRING" paramType="SCALAR" />
    <param type="IN" name="sigle" sqlType="STRING" paramType="SCALAR" />
    <param type="IN" name="objetSocial" sqlType="STRING" paramType="SCALAR" />
    <param type="IN" name="idSecteurActivite" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="activitePrincipal" sqlType="STRING" paramType="SCALAR" />
    <param type="IN" name="activiteImportExport" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="activiteIndustrielCollecteur" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="activiteGrossiste" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="capital" sqlType="DOUBLE" paramType="SCALAR" />
    <param type="IN" name="montantPartSocial" sqlType="DOUBLE" paramType="SCALAR" />
    <param type="IN" name="choixImposition" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="tva" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="duree" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="finExerciceSocial" sqlType="DATE" paramType="SCALAR" />
    <param type="IN" name="idSociete" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="dateStatut" sqlType="DATE" paramType="SCALAR" />
    <param type="IN" name="idSiegeSocial" sqlType="INTEGER" paramType="SCALAR" optional="false" defaultValue="null" />
    <param type="IN" name="idDevise" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="idDevisePartAssocie" sqlType="INTEGER" paramType="SCALAR" optional="false" />
  </query>
  <query id="getCompany" useConfig="societeDS">
    <sql> SELECT * FROM public.societe LEFT JOIN public.devise devise on societe."idDevise"=devise."idDevise" WHERE "idSociete"=:idSociete</sql>
    <param type="IN" name="idSociete" sqlType="INTEGER" paramType="SCALAR" />
    <result outputType="json">{
    "Company": {
        "idSociete":"$idSociete",
        "formeJuridique": "$formeJuridique",
        "idFormeJuridique": "$idFormeJuridique",
        "denominationSocial": "$denominationSocial",
        "nomCommercial": "$nomCommercial",
        "sigle": "$sigle",
        "objetSocial": "$objetSocial",
        "idSecteurActivite": "$idSecteurActivite",
        "activitePrincipal": "$activitePrincipal",
        "activiteImportExport": "$activiteImportExport",
        "activiteIndustrielCollecteur": "$activiteIndustrielCollecteur",
        "activiteGrossiste": "$activiteGrossiste",
        "capital":"$capital",
        "montantPartSocial": "$montantPartSocial",
        "dateStatut": "$dateStatut",
        "choixImposition": "$choixImposition",
        "tva":"$tva",
        "duree":"$duree",
        "finExerciceSocial": "$finExerciceSocial",
        "idPersonne": "$idPersonne",
        "idDossier": "$idDossier",
        "idSiegeSocial": "$idSiegeSocial",
        "idDevise": "$idDevise",
        "idDevisePartAssocie": "$idDevisePartAssocie",
        "NIF":"$NIF",
        "dateNIF":"$dateNIF",
        "STAT":"$STAT",
        "RCS":"$RCS",
        "dateSTAT":"$dateSTAT",
        "dateRCS":"$dateRCS",
        "labelDevise":"$labelDevise",
        "ubi":"$ubi",
        "activiteSecondaire": "$activiteSecondaire",
        "isDenominationChecked": "$isDenominationChecked"
    }
}</result>
  </query>
  <query id="addAssociate" useConfig="societeDS">
    <sql>INSERT INTO public.associe(
	 "partCapitalAssocie", "idPersonne", engagement, "idTypeAssocie", "idPersonneMoral", "idStatutSociete", "gerantStatutaire", "apportNature","idDevise","descriptifApportEnNature", "montantApportEnNature", "idDeviseMontantApportEnNature")
	VALUES (:partCapitalAssocie, :idPersonne, :engagement, :idTypeAssocie, :idPersonneMoral, :idStatutSociete::int[],:gerantStatutaire , :apportNature,:idDevise,:descriptifApportEnNature,:montantApportEnNature,:idDeviseMontantApportEnNature) RETURNING "idAssocie"</sql>
    <param type="IN" name="partCapitalAssocie" sqlType="DOUBLE" paramType="SCALAR" optional="false" />
    <param type="IN" name="idPersonne" sqlType="INTEGER" paramType="SCALAR" optional="true" />
    <param type="IN" name="engagement" sqlType="INTEGER" paramType="SCALAR" optional="true" />
    <param type="IN" name="idTypeAssocie" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="apportNature" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="idPersonneMoral" sqlType="INTEGER" paramType="SCALAR" optional="true" />
    <param type="IN" name="idStatutSociete" sqlType="STRING" paramType="ARRAY" optional="false" />
    <param type="IN" name="gerantStatutaire" sqlType="INTEGER" paramType="SCALAR" optional="false" defaultValue="null" />
    <param type="IN" name="idDevise" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="descriptifApportEnNature" sqlType="STRING" paramType="SCALAR" optional="true" />
    <param type="IN" name="idDeviseMontantApportEnNature" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="montantApportEnNature" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <result outputType="json">{"idAssocie":{"idAssocie":$idAssocie}}</result>
  </query>
  <query id="addCompanyAssociate" useConfig="societeDS">
    <sql>INSERT INTO public."societeAssocie"(
	"idSociete", "idAssocie", "isDefault")
	VALUES (:idSociete, :idAssocie, :isDefault);</sql>
    <param type="IN" name="idSociete" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="idAssocie" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="isDefault" sqlType="STRING" paramType="SCALAR" optional="false" />
  </query>
  <query id="getCompanyInformationByPersonId" useConfig="societeDS">
    <sql>SELECT "idSociete", "denominationSocial","idDossier"	FROM public.societe WHERE "idPersonne"=:idPersonne ORDER by "idSociete" DESC</sql>
    <param type="IN" name="idPersonne" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <result outputType="json">{"societies":{"society":[{"idSociete":"$idSociete", "denominationSocial":"$denominationSocial","idDossier":"$idDossier"}]}}</result>
  </query>
  <query id="deleteCompany" useConfig="societeDS">
    <sql>Delete 	FROM public.societe WHERE "idSociete"=:idSociete</sql>
    <param type="IN" name="idSociete" sqlType="INTEGER" paramType="SCALAR" optional="false" />
  </query>
  <query id="getActivitySector" useConfig="societeDS">
    <sql>SELECT "libelleSecteurActivite", "idSecteurActivite"
	FROM public."secteurActivite";</sql>
    <result outputType="json">{"activitySectors":{"activity":[{"libelleSecteurActivite":"$libelleSecteurActivite","idSecteurActivite":"$idSecteurActivite"}]}}</result>
  </query>
  <query id="getAssociateByCompanyId" useConfig="societeDS">
    <sql>SELECT  "idStatutSociete"::varchar,associe ."idAssocie" as "idAssocie" , "isDefault", "idSociete","partCapitalAssocie", "idPersonne", "idTypeAssocie", "idPersonneMoral", "gerantStatutaire", "apportNature",engagement,associe."idDevise","descriptifApportEnNature","montantApportEnNature","idDeviseMontantApportEnNature",devise."labelDevise" as "labelDevise","deviseM"."labelDevise" as "labelDeviseMontantApport" FROM  public."societeAssocie" socAs  LEFT JOIN public."associe" associe ON associe."idAssocie"=socAs."idAssocie" LEFT JOIN 
	public.devise devise on associe."idDevise"=devise."idDevise" LEFT JOIN 
	public.devise "deviseM" on associe."idDeviseMontantApportEnNature"="deviseM"."idDevise"  WHERE "idSociete"=:idSociete</sql>
    <param type="IN" name="idSociete " sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <result outputType="json">{"data":{"associates":[{
					"idStatutSociete":"$idStatutSociete",
					"idAssocie":"$idAssocie",
					"isDefault":"$isDefault",
					"idSociete":"$idSociete",
					"partCapitalAssocie":"$partCapitalAssocie",
					"idPersonne":"$idPersonne",
					"idTypeAssocie":"$idTypeAssocie",
					"idPersonneMoral":"$idPersonneMoral",
					"gerantStatutaire":"$gerantStatutaire",
					"apportNature":"$apportNature",
					"engagement":"$engagement",
					"idDevise":"$idDevise",
					"descriptifApportEnNature":"$descriptifApportEnNature",
					"montantApportEnNature":"$montantApportEnNature",
					"idDeviseMontantApportEnNature":"$idDeviseMontantApportEnNature",
					"labelDevise":"$labelDevise",
					 "labelDeviseMontantApport":"$labelDeviseMontantApport"
					}]}}
	</result>
  </query>
  <query id="getExploitationPlace" useConfig="societeDS">
    <sql>SELECT "idSiege", dureebail, "montantBail", "adresseSiegeSocial", "idTypeBailleur", "idTypeContrat", "idBailleurPersonne", "idBailleurPersonneMoral", "autorisationProp", "siegePrincipal", "idTypeEtablissement", "debutBail"
	FROM public."siegeSocial" WHERE "siegePrincipal"=:siegePrincipal</sql>
    <param type="IN" name="siegePrincipal" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <result outputType="json">{"data":{"exploitations":[{"idSiege":"$idSiege","dureebail":"$dureebail","montantBail":"$montantBail","adresseSiegeSocial":"$adresseSiegeSocial","idTypeBailleur":"$idTypeBailleur","idTypeContrat":"$idTypeContrat",
    "idBailleurPersonne":"$idBailleurPersonne", "idBailleurPersonneMoral":"$idBailleurPersonneMoral", "autorisationProp":"$autorisationProp", "siegePrincipal":"$siegePrincipal", "idTypeEtablissement": $idTypeEtablissement, "debutBail": "$debutBail"
}]}}</result>
  </query>
  <query id="getGreffeCode" useConfig="societeDS">
    <sql>SELECT * FROM public."codeGreffe" WHERE "idDistrict" = :idDistrict</sql>
    <param type="IN" name="idDistrict" sqlType="INTEGER" paramType="SCALAR" />
    <result outputType="json">{"data":{"codeGreffe":{"code":$code, "idDistrict":$idDistrict}}}</result>
  </query>
  <query id="getBusinessPlaces" useConfig="societeDS">
    <sql>select adresse.*, ss."idTypeBailleur", ss."idBailleurPersonne", ss."idBailleurPersonneMoral" from public."siegeSocial" ss 
    	join public.societe on societe."idSiegeSocial" = ss."siegePrincipal" 
    	join public.adresse on adresse."idAdresse" = ss."adresseSiegeSocial" 
    	where societe."idSociete" = :id</sql>
    <param type="IN" name="id" sqlType="INTEGER" paramType="SCALAR" />
    <result outputType="json">{"data":{"siegeSociales":[{
    	"idAdresse":"$idAdresse",
    	"idFokontany":"$idFokontany",
    	"idCommune":"$idCommune",
    	"idRegion":"$idRegion",
    	"idDistrict":"$idDistrict",
    	"idArrondissement":"$idArrondissement",
    	"adresse":"$adresse",
    	"idProvince":"$idProvince",
    	"codePays":"$codePays",
    	"idVille":"$idVille",
    	"bailleur": {
    		"idTypeBailleur": $idTypeBailleur,
    		"idBailleurPersonne": $idBailleurPersonne,
    		"idBailleurPersonneMoral": $idBailleurPersonneMoral
    	}
    }]}}</result>
  </query>
  <query id="getDefaultAssociateByCompanyId" useConfig="societeDS">
    <sql>SELECT  "idStatutSociete"::varchar,associe."idAssocie" as "idAssocie" , "isDefault", "idSociete","partCapitalAssocie", "idPersonne", "idTypeAssocie", "idPersonneMoral", "gerantStatutaire", "apportNature",engagement FROM  public."societeAssocie" socAs  LEFT JOIN public."associe" associe ON associe."idAssocie"=socAs."idAssocie" 
	WHERE "idSociete"=:idSociete AND socAs."isDefault" = 'true';</sql>
    <param type="IN" name="idSociete " sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <result outputType="json">{"data":{"associate":{
		"idStatutSociete":"$idStatutSociete",
		"idAssocie":"$idAssocie",
		"isDefault":"$isDefault",
		"idSociete":"$idSociete",
		"partCapitalAssocie":"$partCapitalAssocie",
		"idPersonne":"$idPersonne",
		"idTypeAssocie":"$idTypeAssocie",
		"idPersonneMoral":"$idPersonneMoral",
		"gerantStatutaire":"$gerantStatutaire",
		"apportNature":"$apportNature",
		"engagement":"$engagement"
		}}}
	</result>
  </query>
  <query id="deleteCompanyAssociate" useConfig="societeDS">
    <sql>DELETE FROM public."societeAssocie"
	WHERE "idAssocie"=:idAssocie</sql>
    <param type="IN" name="idAssocie" sqlType="INTEGER" paramType="SCALAR" optional="false" />
  </query>
  <query id="deleteAssociate" useConfig="societeDS">
    <sql>DELETE FROM public.associe
	WHERE "idAssocie"=:idAssocie</sql>
    <param type="IN" name="idAssocie" sqlType="INTEGER" paramType="SCALAR" optional="false" />
  </query>
  <query id="getAssociateById" useConfig="societeDS">
    <sql>SELECT * FROM public.associe WHERE "idAssocie"=:idAssocie</sql>
    <param type="IN" name="idAssocie" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <result outputType="json">{"associate":{
		"idAssocie":"$idAssocie",
		"partCapitalAssocie":"$partCapitalAssocie",
		"idPersonne":"$idPersonne",
		"idTypeAssocie":"$idTypeAssocie",
		"idPersonneMoral":"$idPersonneMoral",
		"gerantStatutaire":"$gerantStatutaire",
		"apportNature":"$apportNature",
		"engagement":"$engagement",
		"descriptifApportEnNature":"$descriptifApportEnNature", 
		"montantApportEnNature":"$montantApportEnNature", 
		"idDeviseMontantApportEnNature":"$idDeviseMontantApportEnNature"
		}}</result>
  </query>
  <query id="updateAssociate" useConfig="societeDS">
    <sql>UPDATE public.associe
	SET "partCapitalAssocie"=:partCapitalAssocie, "idPersonne"=:idPersonne, "idTypeAssocie"=:idTypeAssocie, "idPersonneMoral"=:idPersonneMoral, "idStatutSociete"=:idStatutSociete::int[], "gerantStatutaire"=:gerantStatutaire, "apportNature"=:apportNature, engagement=:engagement,"descriptifApportEnNature"=:descriptifApportEnNature, "montantApportEnNature"=:montantApportEnNature, "idDeviseMontantApportEnNature"=:idDeviseMontantApportEnNature,"idDevise"=:idDevise
	
	WHERE "idAssocie" =:idAssocie </sql>
    <param type="IN" name="idAssocie" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="partCapitalAssocie" sqlType="DOUBLE" paramType="SCALAR" optional="false" />
    <param type="IN" name="idPersonne" sqlType="INTEGER" paramType="SCALAR" optional="true" />
    <param type="IN" name="engagement" sqlType="INTEGER" paramType="SCALAR" optional="true" />
    <param type="IN" name="idTypeAssocie" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="apportNature" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="idPersonneMoral" sqlType="INTEGER" paramType="SCALAR" optional="true" />
    <param type="IN" name="idStatutSociete" sqlType="STRING" paramType="ARRAY" optional="false" />
    <param type="IN" name="gerantStatutaire" sqlType="INTEGER" paramType="SCALAR" optional="false" defaultValue="null" />
    <param type="IN" name="descriptifApportEnNature" sqlType="STRING" paramType="SCALAR" optional="false" defaultValue="null" />
    <param type="IN" name="montantApportEnNature" sqlType="DOUBLE" paramType="SCALAR" optional="false" defaultValue="null" />
    <param type="IN" name="idDeviseMontantApportEnNature" sqlType="INTEGER" paramType="SCALAR" optional="false" defaultValue="null" />
    <param type="IN" name="idDevise" sqlType="INTEGER" paramType="SCALAR" optional="false" />
  </query>
  <query id="deleteSocialPlace" useConfig="societeDS">
    <sql>DELETE FROM public."siegeSocial"
	WHERE "idSiege"=:idSiege</sql>
    <param type="IN" name="idSiege" sqlType="INTEGER" paramType="SCALAR" optional="false" />
  </query>
  <query id="deleteAdress" useConfig="societeDS">
    <sql>DELETE FROM public.adresse
	WHERE "idAdresse"=:idAdresse</sql>
    <param type="IN" name="idAdresse" sqlType="INTEGER" paramType="SCALAR" optional="false" />
  </query>
  <query id="userFolders" useConfig="societeDS">
    <sql>SELECT "idDossier" FROM public.societe WHERE "idDossier" IS NOT NULL AND "idPersonne" = :idPersonne</sql>
    <param type="IN" name="idPersonne " sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <result outputType="json">{"data":{"folderIds":[{"idDossier":"$idDossier"}]}}</result>
  </query>
  <query id="updateNIF" useConfig="societeDS">
    <sql>UPDATE public.societe
	SET  "NIF"=:NIF, "dateNIF"=:dateNIF  WHERE "idSociete"=:idSociete</sql>
    <param type="IN" name="idSociete" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="NIF" sqlType="STRING" paramType="SCALAR" optional="false" />
    <param type="IN" name="dateNIF" sqlType="DATE" paramType="SCALAR" optional="false" />
  </query>
  <query id="updateSTAT" useConfig="societeDS">
    <sql>UPDATE public.societe
	SET  "STAT"=:STAT, "dateSTAT"=:dateSTAT  WHERE "idSociete"=:idSociete</sql>
    <param type="IN" name="STAT" sqlType="STRING" paramType="SCALAR" optional="false" />
    <param type="IN" name="idSociete" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="dateSTAT " sqlType="DATE" paramType="SCALAR" optional="false" />
  </query>
  <query id="updateRCS" useConfig="societeDS">
    <sql>UPDATE public.societe
	SET  "RCS"=:RCS,"dateRCS"=:dateRCS WHERE "idSociete"=:idSociete</sql>
    <param type="IN" name="RCS" sqlType="STRING" paramType="SCALAR" optional="false" />
    <param type="IN" name="idSociete" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="dateRCS " sqlType="DATE" paramType="SCALAR" optional="false" />
  </query>
  <query id="updateUBI" useConfig="societeDS">
    <sql>UPDATE public.societe
	SET "ubi"= :ubi, "dateCreation" = CURRENT_TIMESTAMP WHERE "idSociete"=:idSociete</sql>
    <param type="IN" name="ubi" sqlType="STRING" paramType="SCALAR" optional="false" />
    <param type="IN" name="idSociete" sqlType="INTEGER" paramType="SCALAR" optional="false" />
  </query>
  <query id="statutInteroperabilite" useConfig="societeDS">
    <sql>INSERT INTO public."statutInteroperabilite"(
	 "idSociete", "RCS", "INSTAT", "DGI", "EDBM")
	VALUES ( :idSociete, :RCS, :INSTAT, :DGI, :EDBM);</sql>
    <param type="IN" name="idSociete" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="INSTAT" sqlType="INTEGER" paramType="SCALAR" optional="true" />
    <param type="IN" name="RCS" sqlType="INTEGER" paramType="SCALAR" optional="true" />
    <param type="IN" name="DGI" sqlType="INTEGER" paramType="SCALAR" optional="true" />
    <param type="IN" name="EDBM" sqlType="INTEGER" paramType="SCALAR" optional="true" />
  </query>
  <query id="getCreatedCompanyId" useConfig="societeDS">
    <sql>
    	SELECT status.id, status."idSociete" FROM public."statutInteroperabilite" status
    	JOIN public.societe ON societe."idSociete" = status."idSociete"
    	JOIN "siegeSocial" ss ON ss."idSiege" = societe."idSiegeSocial"
      	JOIN adresse ON adresse."idAdresse" = ss."adresseSiegeSocial"
      	WHERE ss."siegePrincipal" IS NULL AND adresse."idRegion" IN (1) 
    	AND status."RCS" > 1 AND status."INSTAT" > 1 AND status."DGI" > 1 AND ("EDBM"=0 OR "EDBM" IS NULL) AND societe."STAT" IS NOT NULL
    </sql>
    <result outputType="json">{"status":{"company":[{"idSociete":"$idSociete"}]}}</result>
  </query>
  <query id="setEdbmInterStatus" useConfig="societeDS">
    <sql>UPDATE public."statutInteroperabilite" SET "EDBM"=:status WHERE "idSociete"=ANY(:idsSociete::int[]) </sql>
    <param type="IN" name="idsSociete" sqlType="STRING" paramType="ARRAY" optional="false" />
    <param type="IN" name="status" sqlType="INTEGER" paramType="SCALAR" optional="false" />
  </query>
  <query id="setSiteInterStatus" useConfig="societeDS">
    <sql>UPDATE public."statutInteroperabilite" SET "SITE"=:status WHERE "idSociete"=ANY(:idsSociete::int[]) </sql>
    <param type="IN" name="idsSociete" sqlType="STRING" paramType="ARRAY" optional="false" />
    <param type="IN" name="status" sqlType="INTEGER" paramType="SCALAR" optional="false" />
  </query>
  <query id="setInstatInterStatus" useConfig="societeDS">
    <sql>UPDATE public."statutInteroperabilite"
	SET "INSTAT"=:status WHERE "idSociete"=:idSociete</sql>
    <param type="IN" name="status" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="idSociete" sqlType="INTEGER" paramType="SCALAR" optional="false" />
  </query>
  <query id="setDgiInterStatus" useConfig="societeDS">
    <sql>UPDATE public."statutInteroperabilite"
	SET "DGI"=:status WHERE "idSociete"=:idSociete</sql>
    <param type="IN" name="status" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="idSociete" sqlType="INTEGER" paramType="SCALAR" optional="false" />
  </query>
  <query id="setRcsInterStatus" useConfig="societeDS">
    <sql>UPDATE public."statutInteroperabilite"
	SET "RCS"=:status WHERE "idSociete"=:idSociete</sql>
    <param type="IN" name="status" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="idSociete" sqlType="INTEGER" paramType="SCALAR" optional="false" />
  </query>
  <query id="listCreatedSociety" useConfig="societeDS">
    <sql>select * from public.societe left join devise on devise."idDevise"=societe."idDevise" where "idPersonne"=:idPersonne and "dateCreation" is not null and ubi is not null and "NIF" is not null and "STAT" is not null and "RCS" is not null limit :limit</sql>
    <param type="IN" name="idPersonne" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="limit" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <result outputType="json">{"societies":{"society":[{"denominationSocial":"$denominationSocial","ubi":"$ubi","dateCreation":"$dateCreation","idDossier":"$idDossier","idSociete":"$idSociete","formeJuridique":"$formeJuridique","capital":"$capital","labelDeviseCapital":"$labelDevise","dateNIF":"$dateNIF","dateSTAT":"$dateSTAT","dateRCS":"$dateRCS"}]}}</result>
  </query>
  <query id="insertEmptyJustificatif" useConfig="societeDS">
    <sql>INSERT INTO public.justificatif(
	"pathNif", "pathRcs", "pathStat")
	VALUES ( :pathNif, :pathRcs, :pathStat) RETURNING id;</sql>
    <param type="IN" name="pathStat" sqlType="STRING" paramType="SCALAR" optional="false" />
    <param type="IN" name="pathRcs" sqlType="STRING" paramType="SCALAR" optional="false" />
    <param type="IN" name="pathNif" sqlType="STRING" paramType="SCALAR" optional="false" />
    <result outputType="json">{"id":{"id":"$id"}}</result>
  </query>
  <query id="updatePathNif" useConfig="societeDS">
    <sql>UPDATE public.justificatif
	SET "pathNif"= :pathNif
	WHERE id= :id</sql>
    <param type="IN" name="id" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="pathNif" sqlType="STRING" paramType="SCALAR" optional="false" />
  </query>
  <query id="updatePathRcs" useConfig="societeDS">
    <sql>UPDATE public.justificatif
	SET "pathRcs"= :pathRcs
	WHERE id= :id</sql>
    <param type="IN" name="id" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="pathRcs" sqlType="STRING" paramType="SCALAR" optional="false" />
  </query>
  <query id="updatePathInstat" useConfig="societeDS">
    <sql>UPDATE public.justificatif
	SET "pathStat"=:pathStat
	WHERE id=:id</sql>
    <param type="IN" name="id" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="pathStat" sqlType="STRING" paramType="SCALAR" optional="false" />
  </query>
  <query id="addEnregistrementFiscale" useConfig="societeDS">
    <sql>INSERT INTO public."enregistrementFiscale"(
	 "dateEnregistrement", "numeroRegistre", "numeroEnregistrement", "idUtilisateurAgent", "montantDroit", "idSociete", "idDocument", "numeroFolio")
	VALUES ( :dateEnregistrement, :numeroRegistre, :numeroEnregistrement, :idUtilisateurAgent, :montantDroit, :idSociete, :idDocument, :numeroFolio);</sql>
    <param type="IN" name="dateEnregistrement" sqlType="DATE" paramType="SCALAR" optional="false" />
    <param type="IN" name="numeroRegistre" sqlType="STRING" paramType="SCALAR" optional="false" />
    <param type="IN" name="numeroEnregistrement" sqlType="STRING" paramType="SCALAR" optional="false" />
    <param type="IN" name="idUtilisateurAgent" sqlType="STRING" paramType="SCALAR" optional="false" />
    <param type="IN" name="montantDroit" sqlType="DOUBLE" paramType="SCALAR" optional="false" />
    <param type="IN" name="idSociete" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="idDocument" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="numeroFolio" sqlType="STRING" paramType="SCALAR" optional="true" />
  </query>
  <query id="checkStatusTable" useConfig="societeDS">
    <sql>SELECT * FROM public."statutInteroperabilite" WHERE "idSociete"=:idSociete</sql>
    <param type="IN" name="idSociete" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <result outputType="json">{"company":{"idSociete":"$idSociete", "rcs": $RCS, "instat": $INSTAT,"dgi":"$DGI","edbm":"$EDBM"}}</result>
  </query>
  <query id="getActiviteReglemente" useConfig="societeDS">
    <sql>SELECT * FROM public."secteurActivite" activity WHERE activity."idSecteurActivite" =:id</sql>
    <param type="IN" name="id" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <result outputType="json">{"activity":{"libelleSecteurActivite":"$libelleSecteurActivite","idSecteurActivite":"$idSecteurActivite"}}</result>
  </query>
  <query id="bailCalculator" useConfig="societeDS">
    <sql>SELECT (ss."montantBail"::double precision * ss.dureebail) as account, ss."idSiege" FROM public."siegeSocial" ss JOIN public.societe ON societe."idSiegeSocial" = ss."idSiege" WHERE societe."idSociete" = :idSociete</sql>
    <param type="IN" name="idSociete" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <result outputType="json">{"socialPlace":{"idSiege":$idSiege, "account": $account}}</result>
  </query>
  <query id="exploitationBailSum" useConfig="societeDS">
    <sql>SELECT sum(("montantBail"::double precision * dureebail)) as account FROM public."siegeSocial" 
    	JOIN public.adresse on adresse."idAdresse" = "adresseSiegeSocial"
    	WHERE "siegePrincipal" = :idSiege AND TRIM(adresse.adresse) != :siegeAddress</sql>
    <param type="IN" name="idSiege" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <param type="IN" name="siegeAddress" sqlType="STRING" paramType="SCALAR" optional="true" />
    <result outputType="json">{"exploitation":{"account": $account}}</result>
  </query>
  <query id="enregistrementFiscale" useConfig="societeDS">
    <sql>SELECT id,"numeroFolio", "dateEnregistrement", "numeroRegistre", "numeroEnregistrement", "idUtilisateurAgent", "montantDroit", public."enregistrementFiscale"."idSociete", "idDocument", societe."NIF", societe."dateNIF" FROM public."enregistrementFiscale" LEFT JOIN public.societe ON public.societe."idSociete"=public."enregistrementFiscale"."idSociete" WHERE public."enregistrementFiscale"."idSociete"=:idSociete</sql>
    <param type="IN" name="idSociete" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <result outputType="json">{"data":{
    	"enregistrementFiscaux":[{"id":$id, "dateEnregistrement":"$dateEnregistrement", "numeroRegistre":"$numeroRegistre", "numeroEnregistrement":"$numeroEnregistrement", "montantDroit":$montantDroit, "idDocument": $idDocument, "NIF":"$NIF", "dateNIF": "$dateNIF", "numeroFolio": "$numeroFolio"}]
    	}}
    </result>
  </query>
  <query id="companyAddressByCompanyId" useConfig="societeDS">
    <sql>SELECT adresse.* FROM public."siegeSocial" siege 
    LEFT JOIN public.adresse ON adresse."idAdresse" = siege."adresseSiegeSocial"
    LEFT JOIN public.societe ON societe."idSiegeSocial" = siege."idSiege"
    WHERE societe."idSociete"= :companyId</sql>
    <param type="IN" name="companyId" sqlType="INTEGER" paramType="SCALAR" />
    <result outputType="json">{"adresse": {
	    	"idAdresse":"$idAdresse",
	    	"idFokontany":"$idFokontany",
	    	"idCommune":"$idCommune",
	    	"idRegion":"$idRegion",
	    	"idDistrict":"$idDistrict",
	    	"idArrondissement":"$idArrondissement",
	    	"adresse":"$adresse",
	    	"idProvince":"$idProvince",
	    	"codePays":"$codePays",
	    	"idVille":"$idVille"
	    }}
	</result>
  </query>
  <query id="relativeCorporate" useConfig="societeDS">
    <sql>
    	WITH
	    name AS (VALUES (:corporate))
    	SELECT "denominationSocial", sigle, "nomCommercial" FROM public.societe 
    	WHERE LOWER("denominationSocial") LIKE CONCAT((table name),'%') OR LOWER(sigle) LIKE CONCAT((table name),'%') OR LOWER("nomCommercial") LIKE CONCAT((table name),'%')
    </sql>
    <param type="IN" name="corporate" sqlType="STRING" paramType="SCALAR" optional="false" />
    <result outputType="json">
    	{
    		"data":{
    			"corporates":[{
    				"denominationSocial":"$denominationSocial",
    				"sigle": "$sigle",
    				"nomCommerical": "$nomCommercial"
    			}]
    		}
    	}
    </result>
  </query>
  <query id="companyByDenomination" useConfig="societeDS">
    <sql>SELECT societe.* FROM public.societe WHERE LOWER("denominationSocial") = LOWER(:denomination)</sql>
    <param type="IN" name="denomination" sqlType="STRING" paramType="SCALAR" optional="false" />
    <result outputType="json">{
    		"company": {
    			"idSociete":$idSociete,
		        "formeJuridique": "$formeJuridique",
		        "idFormeJuridique": "$idFormeJuridique",
		        "denominationSocial": "$denominationSocial",
		        "nomCommercial": "$nomCommercial",
		        "sigle": "$sigle",
		        "objetSocial": "$objetSocial",
		        "idSecteurActivite": "$idSecteurActivite",
		        "activitePrincipal": "$activitePrincipal",
		        "activiteImportExport": "$activiteImportExport",
		        "activiteIndustrielCollecteur": "$activiteIndustrielCollecteur",
		        "activiteGrossiste": "$activiteGrossiste",
		        "capital":"$capital",
		        "montantPartSocial": "$montantPartSocial",
		        "dateStatut": "$dateStatut",
		        "choixImposition": "$choixImposition",
		        "tva":"$tva",
		        "duree":"$duree",
		        "finExerciceSocial": "$finExerciceSocial",
		        "idPersonne": "$idPersonne",
		        "idDossier": "$idDossier",
		        "idSiegeSocial": "$idSiegeSocial",
		        "idDevise": "$idDevise",
		        "idDevisePartAssocie": "$idDevisePartAssocie",
		        "NIF":"$NIF",
		        "dateNIF":"$dateNIF",
		        "STAT":"$STAT",
		        "RCS":"$RCS",
		        "dateSTAT":"$dateSTAT",
		        "dateRCS":"$dateRCS",
		        "ubi":"$ubi",
		        "activiteSecondaire": "$activiteSecondaire"
    		}
    	}
    </result>
  </query>
  <query id="companyByNif" useConfig="societeDS">
    <sql>SELECT societe.* FROM public.societe WHERE "NIF" = :nif</sql>
    <param type="IN" name="nif" sqlType="STRING" paramType="SCALAR" optional="false" />
    <result outputType="json">{
    		"company": {
    			"idSociete":$idSociete,
		        "formeJuridique": "$formeJuridique",
		        "idFormeJuridique": "$idFormeJuridique",
		        "denominationSocial": "$denominationSocial",
		        "nomCommercial": "$nomCommercial",
		        "sigle": "$sigle",
		        "objetSocial": "$objetSocial",
		        "idSecteurActivite": "$idSecteurActivite",
		        "activitePrincipal": "$activitePrincipal",
		        "activiteImportExport": "$activiteImportExport",
		        "activiteIndustrielCollecteur": "$activiteIndustrielCollecteur",
		        "activiteGrossiste": "$activiteGrossiste",
		        "capital":"$capital",
		        "montantPartSocial": "$montantPartSocial",
		        "dateStatut": "$dateStatut",
		        "choixImposition": "$choixImposition",
		        "tva":"$tva",
		        "duree":"$duree",
		        "finExerciceSocial": "$finExerciceSocial",
		        "idPersonne": "$idPersonne",
		        "idDossier": "$idDossier",
		        "idSiegeSocial": "$idSiegeSocial",
		        "idDevise": "$idDevise",
		        "idDevisePartAssocie": "$idDevisePartAssocie",
		        "NIF":"$NIF",
		        "dateNIF":"$dateNIF",
		        "STAT":"$STAT",
		        "RCS":"$RCS",
		        "dateSTAT":"$dateSTAT",
		        "dateRCS":"$dateRCS",
		        "ubi":"$ubi",
		        "activiteSecondaire": "$activiteSecondaire"
    		}
    	}
    </result>
  </query>
  <query id="associate-legal-persons" useConfig="societeDS">
    <sql>SELECT associe.*, associe."idStatutSociete"::varchar FROM public.associe JOIN public."societeAssocie" sa ON sa."idAssocie" = associe."idAssocie" WHERE sa."idSociete" = :companyId AND "idTypeAssocie" = :associateType</sql>
    <param type="IN" name="companyId" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="associateType" sqlType="INTEGER" paramType="SCALAR" />
    <result outputType="json">{
    		"data": {
    			"associates": [{
	    			"idAssocie":$idAssocie,
	    			"partCapitalAssocie": $partCapitalAssocie,
			        "idPersonne": $idPersonne,
			        "idTypeAssocie": $idTypeAssocie,
			        "idPersonneMoral": $idPersonneMoral,
			        "idStatutSociete": "$idStatutSociete",
			        "apportNature": $apportNature,
			        "gerantStatutaire": $gerantStatutaire,
			        "engagement": $engagement,
			        "idDevise": $idDevise,
			        "descriptifApportEnNature": "$descriptifApportEnNature",
			        "idDeviseMontantApportEnNature": $idDeviseMontantApportEnNature,
			        "montantApportEnNature": $montantApportEnNature
	    		}]
    		}
    	}
    </result>
  </query>
  <query id="siege-social-lessors-filter" useConfig="societeDS">
    <sql>SELECT "siegeSocial".* FROM public."siegeSocial" JOIN public.societe ON "idSiegeSocial" = "idSiege" WHERE "idSociete" = :companyId AND "idTypeBailleur" = :lessorType</sql>
    <param type="IN" name="companyId" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="lessorType" sqlType="INTEGER" paramType="SCALAR" />
    <result outputType="json">{
    		"data": {
    			"lessors": [{
	    			"idSiege":$idSiege,
	    			"dureebail": $dureebail,
			        "montantBail": $montantBail,
			        "adresseSiegeSocial": $adresseSiegeSocial,
			        "idTypeBailleur": $idTypeBailleur,
			        "idTypeContrat": "$idTypeContrat",
			        "autorisationProp": $autorisationProp,
			        "idBailleurPersonne": $idBailleurPersonne,
			        "idBailleurPersonneMoral": $idBailleurPersonneMoral,
			        "siegePrincipal": $siegePrincipal,
			        "idTypeEtablissement": $idTypeEtablissement,
			        "debutBail": "$debutBail"
	    		}]
    		}
    	}
    </result>
  </query>
  <query id="exploitation-lessors-filter" useConfig="societeDS">
    <sql>SELECT * FROM public."siegeSocial" WHERE "idTypeBailleur" = :lessorType AND "siegePrincipal" = (SELECT "idSiegeSocial" FROM public.societe WHERE "idSociete" = :companyId)</sql>
    <param type="IN" name="companyId" sqlType="INTEGER" paramType="SCALAR" />
    <param type="IN" name="lessorType" sqlType="INTEGER" paramType="SCALAR" />
    <result outputType="json">{
    		"data": {
    			"lessors": [{
	    			"idSiege":$idSiege,
	    			"dureebail": $dureebail,
			        "montantBail": $montantBail,
			        "adresseSiegeSocial": $adresseSiegeSocial,
			        "idTypeBailleur": $idTypeBailleur,
			        "idTypeContrat": "$idTypeContrat",
			        "autorisationProp": $autorisationProp,
			        "idBailleurPersonne": $idBailleurPersonne,
			        "idBailleurPersonneMoral": $idBailleurPersonneMoral,
			        "siegePrincipal": $siegePrincipal,
			        "idTypeEtablissement": $idTypeEtablissement,
			        "debutBail": "$debutBail"
	    		}]
    		}
    	}
    </result>
  </query>
  <query id="exploitations" useConfig="societeDS">
    <sql>SELECT * FROM public."siegeSocial" WHERE "siegePrincipal" = (SELECT "idSiegeSocial" FROM public.societe WHERE "idSociete" = :companyId)</sql>
    <param type="IN" name="companyId" sqlType="INTEGER" paramType="SCALAR" />
    <result outputType="json">{
    		"data": {
    			"lessors": [{
	    			"idSiege":$idSiege,
	    			"dureebail": $dureebail,
			        "montantBail": $montantBail,
			        "adresseSiegeSocial": $adresseSiegeSocial,
			        "idTypeBailleur": $idTypeBailleur,
			        "idTypeContrat": "$idTypeContrat",
			        "autorisationProp": $autorisationProp,
			        "idBailleurPersonne": $idBailleurPersonne,
			        "idBailleurPersonneMoral": $idBailleurPersonneMoral,
			        "siegePrincipal": $siegePrincipal,
			        "idTypeEtablissement": $idTypeEtablissement,
			        "debutBail": "$debutBail"
	    		}]
    		}
    	}
    </result>
  </query>
  <query id="societesByFormejuridique" useConfig="societeDS">
    <sql>select  s."denominationSocial",s."idSociete", s."formeJuridique", s."idDossier", s."idFormeJuridique",  s."nomCommercial",
      count(s."denominationSocial") OVER( partition by s."idFormeJuridique") as total
      from public."societe" as s where s."formeJuridique" = :formeJuridique
    </sql>
    <param type="IN" name="formeJuridique" sqlType="STRING" paramType="SCALAR" optional="false" />
    <result outputType="json">{"data":{"societes":[{"denominationSocial":"$denominationSocial",
      "idDossier":"$idDossier","idSociete":"$idSociete","formeJuridique":"$formeJuridique", "nomCommercial": "$nomCommercial", "total": "$total"
      }]}}</result>
  </query>
  <query id="companyByFolderIds" useConfig="societeDS">
    <sql>select  s."denominationSocial",s."idSociete", s."formeJuridique", s."idDossier", sg."dureebail",
      s."idFormeJuridique",  s."nomCommercial", "capital"::text, "montantBail"::text, "NIF"
      from public."societe" as s inner join public."siegeSocial" as sg on sg."idSiege" = s."idSiegeSocial"
      WHERE s."idDossier" =ANY(:idDossier::int[])
    </sql>
    <param type="IN" name="idDossier" sqlType="STRING" paramType="ARRAY" optional="false" />
    <result outputType="json">{"data":{"societes":[{"denominationSocial":"$denominationSocial",
      "idDossier":"$idDossier","idSociete":"$idSociete","formeJuridique":"$formeJuridique",
      "nomCommercial": "$nomCommercial", "nif": "$NIF",
      "montantBail": "$montantBail", "capital": "$capital", "dureebail": "$dureebail"
      }]}}</result>
  </query>

  <query id="companyWithBailsByFolderIds" useConfig="societeDS">
    <sql>
      SELECT
      r1."idSociete",
      r1.capital::text,
      r1."idDossier",
      r1."formeJuridique",
      r1."idFormeJuridique",
      r1."nomCommercial",
      r1."denominationSocial",
      r1.nif,
      sum(totalBailSiege) / count(*) as totalBailSiege,
      sum(totalBailExploitation) as totalBailExploitation,
      sum(totalBailSiege) / count(*) + sum(totalBailExploitation) as totalBailBase
      FROM

      (
        SELECT s."idSociete",
        s."denominationSocial",
        s."idDossier",
        "siegePrincipal",
        (dureebail::double precision * "montantBail"::double precision) as totalBailSiege,
        "idSiege",
        dureebail,
        "montantBail",
        s.capital,
        s."formeJuridique",
        s."idFormeJuridique",
        s."nomCommercial",
        s."NIF" as nif
        FROM "siegeSocial"
        LEFT JOIN societe s on "siegeSocial"."idSiege" = s."idSiegeSocial"
      ) as r1

      LEFT JOIN

      (
        SELECT "siegePrincipal",
        "idSiege",
        (dureebail::double precision * "montantBail"::double precision) as totalBailExploitation,
        dureebail,
        "montantBail"
        FROM "siegeSocial"
        LEFT JOIN societe s on "siegeSocial"."idSiege" = s."idSiegeSocial"
      ) as r2
      on r1."idSiege" = r2."siegePrincipal"
      WHERE r1."idDossier" =ANY(:idDossier::int[])
      GROUP BY r1."idDossier", r1."idDossier", r1.capital, r1."formeJuridique", r1."idFormeJuridique",r1."nomCommercial",r1."nif", r1."idSociete", r1."denominationSocial"
    </sql>
    <param type="IN" name="idDossier" sqlType="STRING" paramType="ARRAY" optional="false"/>
    <result outputType="json">{"data":{"societes":[{"denominationSocial":"$denominationSocial",
      "idDossier":"$idDossier","idSociete":"$idSociete","formeJuridique":"$formeJuridique",
      "nomCommercial": "$nomCommercial", "nif": "$nif",
      "totalBailSiege": "$totalBailSiege", "capital": "$capital","totalBailExploitation": "$totalBailExploitation",
      "totalBailBase": "$totalBailBase"
      }]}}
    </result>
  </query>
  <resource path="companyWithBailsByFolderIds/{idDossier}" method="GET">
    <description>Fetch Facture by folders ids</description>
    <call-query href="companyWithBailsByFolderIds">
      <with-param name="idDossier" query-param="idDossier"/>
    </call-query>
  </resource>

  <query id="checkDenomination" useConfig="societeDS">
    <sql>select exists(select "idSociete" from societe where "denominationSocial"=:denominationSocial) as result</sql>
    <param type="IN" name="denominationSocial" sqlType="STRING" paramType="SCALAR" optional="false" />
    <result outputType="json">{"data":{"result":$result}}</result>
  </query>
  <resource path="checkDenomination" method="GET">
    <description />
    <call-query href="checkDenomination">
      <with-param name="denominationSocial" query-param="denominationSocial" />
    </call-query>
  </resource>
  
  <resource path="reset/associate" method="PUT">
    <description />
    <call-query href="resetAsscoaiteRole">
      <with-param name="ids" query-param="ids" />
    </call-query>
  </resource>
  <query id="resetAsscoaiteRole" useConfig="societeDS">
    <sql>UPDATE associe SET "idStatutSociete" = NULL WHERE "idAssocie"=ANY(:ids::int[])</sql>
    <param type="IN" name="ids" paramType="ARRAY" sqlType="STRING"/>
  </query>

  <resource path="typeEtablissement/{addressId}" method="GET">
    <description />
    <call-query href="typeEtablissement">
      <with-param name="adresseSiegeSocial" query-param="addressId" />
    </call-query>
  </resource>
  <query id="typeEtablissement" useConfig="societeDS">
    <sql>SELECT te.* FROM "siegeSocial" ss JOIN "typeEtablissement" te ON te.id = ss."idTypeEtablissement" WHERE ss."adresseSiegeSocial" =:adresseSiegeSocial</sql>
    <param type="IN" name="adresseSiegeSocial" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <result outputType="json">{"data":{"id":$id, "name": $name}}</result>
  </query>
  
  <resource path="typeEtablissements" method="GET">
    <description />
    <call-query href="typeEtablissements">
    </call-query>
  </resource>
  <query id="typeEtablissements" useConfig="societeDS">
    <sql>SELECT * FROM "typeEtablissement" ORDER BY id ASC</sql>
    <result outputType="json">{"data": {
    	"types": [{"id":$id, "name": $name}]
    }}</result>
  </query>

  <query id="societeSiegeData" useConfig="societeDS">
    <sql>select "siegeSocial"."adresseSiegeSocial" ,
      societe."denominationSocial",
      adresse.adresse, societe."activiteImportExport",societe."objetSocial",
      societe."activitePrincipal", "siegeSocial"."idBailleurPersonne",
      "siegeSocial"."idBailleurPersonneMoral",
      "siegeSocial"."idTypeBailleur",
      "siegeSocial"."idTypeContrat",
      "siegeSocial"."siegePrincipal",
      "siegeSocial"."idSiege",
      "siegeSocial"."idTypeEtablissement",
      "siegeSocial"."debutBail",
      "societe"."dateStatut", "societe"."nomCommercial"
      from "siegeSocial"
      inner join adresse ON adresse."idAdresse" = "siegeSocial"."adresseSiegeSocial"
      inner join societe ON societe."idSiegeSocial" = "siegeSocial"."idSiege"
      where societe."idSociete" =:idSociete
    </sql>
    <param type="IN" name="idSociete" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <result outputType="json">{"data":{"activitePrincipal": "$activitePrincipal", "adresse": "$adresse", "adresseSiegeSocial": "$adresseSiegeSocial",
      "activiteImportExport": "$activiteImportExport", "idBailleurPersonne": "$idBailleurPersonne", "denominationSocial": "$denominationSocial",
      "idBailleurPersonneMoral": "$idBailleurPersonneMoral", "idTypeBailleur": "$idTypeBailleur", "idTypeContrat": "$idTypeContrat", "idSiege": "$idSiege",
      "siegePrincipal": "$siegePrincipal", "dateStatut": "$dateStatut", "idTypeEtablissement": $idTypeEtablissement, "debutBail":"$debutBail",
      "objetSocial": "$objetSocial", "nomCommercial":"$nomCommercial"}}
    </result>
  </query>
  <resource path="companyInterOp/siegeSociale/{idSociete}" method="GET">
    <description />
    <call-query href="societeSiegeData">
      <with-param name="idSociete" query-param="idSociete" />
    </call-query>
  </resource>

  <query id="societeSiegeLieuExploitation" useConfig="societeDS">
    <sql>select "siegeSocial"."adresseSiegeSocial",
      adresse.adresse,
      "siegeSocial"."siegePrincipal",
      "siegeSocial"."idBailleurPersonne",
      "siegeSocial"."idBailleurPersonneMoral",
      "siegeSocial"."idTypeBailleur",
      "siegeSocial"."idTypeContrat",
      "siegeSocial"."idTypeEtablissement",
      "siegeSocial"."debutBail"
      from "siegeSocial"
      inner join adresse ON adresse."idAdresse" = "siegeSocial"."adresseSiegeSocial"
      where "siegeSocial"."siegePrincipal" =:idSiegePrincipale
    </sql>
    <param type="IN" name="idSiegePrincipale" sqlType="INTEGER" paramType="SCALAR" optional="false" />
    <result outputType="json">{"data":{ "siegeDatas": [{"siegePrincipal": "$siegePrincipal", "adresse": "$adresse", "adresseSiegeSocial": "$adresseSiegeSocial",
      "idBailleurPersonne": "$idBailleurPersonne", "idBailleurPersonneMoral": "$idBailleurPersonneMoral",
      "idTypeBailleur": "$idTypeBailleur", "idTypeContrat": "$idTypeContrat", "idTypeEtablissement":$idTypeEtablissement, "debutBail":"$debutBail"}]}}
    </result>
  </query>
  <resource path="companyInterOp/siegeSociale/exploitation/{idSiegePrincipale}" method="GET">
    <description />
    <call-query href="societeSiegeLieuExploitation">
      <with-param name="idSiegePrincipale" query-param="idSiegePrincipale"/>
    </call-query>
  </resource>
  
  <resource path="agent/filter/by/name" method="POST">
    <description />
    <call-query href="filterCompanyByName">
      <with-param name="name" query-param="name" />
    </call-query>
  </resource>
  <query id="filterCompanyByName" useConfig="societeDS">
    <sql>SELECT * FROM societe WHERE LOWER(TRIM("denominationSocial")) LIKE CONCAT('%',:name, '%') </sql>
    <param type="IN" name="name" paramType="SCALAR" sqlType="STRING"/>
    <result outputType="json">
    	{
    		"data": {
    			"companies": [{
	    			"idSociete":$idSociete,
			        "formeJuridique": "$formeJuridique",
			        "idFormeJuridique": "$idFormeJuridique",
			        "denominationSocial": "$denominationSocial",
			        "nomCommercial": "$nomCommercial",
			        "sigle": "$sigle",
			        "objetSocial": "$objetSocial",
			        "idSecteurActivite": "$idSecteurActivite",
			        "activitePrincipal": "$activitePrincipal",
			        "activiteImportExport": "$activiteImportExport",
			        "activiteIndustrielCollecteur": "$activiteIndustrielCollecteur",
			        "activiteGrossiste": "$activiteGrossiste",
			        "capital":"$capital",
			        "montantPartSocial": "$montantPartSocial",
			        "dateStatut": "$dateStatut",
			        "choixImposition": "$choixImposition",
			        "tva":"$tva",
			        "duree":"$duree",
			        "finExerciceSocial": "$finExerciceSocial",
			        "idPersonne": "$idPersonne",
			        "idDossier": "$idDossier",
			        "idSiegeSocial": "$idSiegeSocial",
			        "idDevise": "$idDevise",
			        "idDevisePartAssocie": "$idDevisePartAssocie",
			        "NIF":"$NIF",
			        "dateNIF":"$dateNIF",
			        "STAT":"$STAT",
			        "RCS":"$RCS",
			        "dateSTAT":"$dateSTAT",
			        "dateRCS":"$dateRCS",
			        "ubi":"$ubi",
			        "activiteSecondaire": "$activiteSecondaire"
	    		}]
    		}
    	}
    </result>
  </query>
  
  <resource path="addresses/companies/{companyId}" method="GET">
		<description />
		<call-query href="getAddressByCompanyId">
			<with-param name="idSociete" query-param="companyId" />
		</call-query>
	</resource>
	<query id="getAddressByCompanyId" useConfig="societeDS">
		<sql>
			SELECT adresse.*
			FROM public.adresse
			JOIN public."siegeSocial" ss ON ss."adresseSiegeSocial" = adresse."idAdresse"
			JOIN public.societe ON societe."idSiegeSocial" = ss."idSiege"
			WHERE societe."idSociete"=:idSociete
		</sql>
		<param type="IN" name="idSociete" paramType="SCALAR" sqlType="INTEGER" optional="false" />
		<result outputType="json">{"data":{
			"idAdresse":"$idAdresse",
			"idFokontany":"$idFokontany",
			"idCommune":"$idCommune",
			"idRegion":"$idRegion",
			"idDistrict":"$idDistrict",
			"idArrondissement":"$idArrondissement",
			"adresse":"$adresse",
			"idProvince":"$idProvince",
			"codePays":"$codePays",
			"idVille":"$idVille",
			"longitude": $longitude,
			"latitude": $latitude
			}}
		</result>
	</query>
	
	<resource path="addresses/{addressId}" method="GET">
		<description />
		<call-query href="getAddressById">
			<with-param name="idAdresse" query-param="addressId" />
		</call-query>
	</resource>
	<query id="getAddressById" useConfig="societeDS">
		<sql>
			SELECT * FROM public.adresse WHERE "idAdresse"=:idAdresse
		</sql>
		<param type="IN" name="idAdresse" paramType="SCALAR"
			sqlType="INTEGER" optional="false" />
		<result outputType="json">{"data":{
			"idAdresse":"$idAdresse",
			"idFokontany":"$idFokontany",
			"idCommune":"$idCommune",
			"idRegion":"$idRegion",
			"idDistrict":"$idDistrict",
			"idArrondissement":"$idArrondissement",
			"adresse":"$adresse",
			"idProvince":"$idProvince",
			"codePays":"$codePays",
			"idVille":"$idVille",
			"longitude": $longitude,
			"latitude": $latitude
			}}
		</result>
	</query>
	
	<!-- RCS INTEGRATOR -->
	<resource path="person-associates/companies/{companyId}" method="GET">
		<description />
		<call-query href="getPersonAssociateByCompanyId">
			<with-param name="companyId" query-param="companyId" />
		</call-query>
	</resource>
	<query id="getPersonAssociateByCompanyId" useConfig="societeDS">
	    <sql>
	    SELECT associe."idPersonne", associe."idPersonneMoral", associe."idStatutSociete"::varchar FROM  public."societeAssocie" sa  
	    JOIN associe ON associe."idAssocie" = sa."idAssocie" 
	    WHERE "idSociete" = :companyId
	    </sql>
	    <param type="IN" name="companyId " sqlType="INTEGER" paramType="SCALAR" optional="false" />
	    <result outputType="json">
	    	{
	    		"data":{
	    			"associates":[{
						"personId":$idPersonne,
						"moralId":$idPersonneMoral,
						"roleIds":"$idStatutSociete"
					}]
				}
			}
		</result>
  	</query>
	<!-- #RCS INTEGRATOR -->

  <resource method="POST" path="companyDgiAddDemandReference">
    <description/>
    <call-query href="companyDgiAddDemandReference">
      <with-param name="idSociete" query-param="idSociete"/>
      <with-param name="dgiRefDem" query-param="dgiRefDem"/>
    </call-query>
  </resource>

  <query id="companyDgiAddDemandReference" useConfig="societeDS">
    <sql>
      INSERT INTO public."dgi_demande_interop_mapping"(
      "idSociete", "dgiRefDem")
      VALUES (:idSociete, :dgiRefDem);
    </sql>
    <param type="IN" name="idSociete" paramType="SCALAR" sqlType="INTEGER"/>
    <param type="IN" name="dgiRefDem" paramType="SCALAR" sqlType="STRING"/>
  </query>

  <resource path="dgiDemandReferenceByCompany" method="GET">
    <description/>
    <call-query href="dgiDemandReferenceByCompany">
      <with-param name="dgiRefDem" query-param="dgiRefDem"/>
    </call-query>
  </resource>
  <query id="dgiDemandReferenceByCompany" useConfig="societeDS">
    <sql>
      SELECT * FROM public."dgi_demande_interop_mapping" where "dgiRefDem" =:dgiRefDem
    </sql>
    <param type="IN" name="dgiRefDem" paramType="SCALAR" sqlType="STRING"/>
    <result outputType="json">
      {"data":{"id":"$id","idSociete":"$idSociete","dgiDemRef":"$dgiRefDem"}}
    </result>
  </query>
  
  <!-- USER MANAGEMENT -->
  <resource path="filter/by/regions" method="POST">
    <description/>
    <call-query href="filterByRegions">
      <with-param name="ids" query-param="ids"/>
    </call-query>
  </resource>
  <query id="filterByRegions" useConfig="societeDS">
    <sql>
      SELECT societe.* FROM societe 
      JOIN "siegeSocial" ss ON ss."idSiege" = societe."idSiegeSocial"
      JOIN adresse ON adresse."idAdresse" = ss."adresseSiegeSocial"
      WHERE ss."siegePrincipal" IS NULL AND adresse."idRegion" IN (:ids) 
    </sql>
    <param type="IN" name="ids" paramType="ARRAY" sqlType="INTEGER"/>
    <result outputType="json">
      {"data": {
    		"companies": [{
    			"idSociete":$idSociete,
		        "formeJuridique": "$formeJuridique",
		        "idFormeJuridique": "$idFormeJuridique",
		        "denominationSocial": "$denominationSocial",
		        "nomCommercial": "$nomCommercial",
		        "sigle": "$sigle",
		        "objetSocial": "$objetSocial",
		        "idSecteurActivite": "$idSecteurActivite",
		        "activitePrincipal": "$activitePrincipal",
		        "activiteImportExport": "$activiteImportExport",
		        "activiteIndustrielCollecteur": "$activiteIndustrielCollecteur",
		        "activiteGrossiste": "$activiteGrossiste",
		        "capital":"$capital",
		        "montantPartSocial": "$montantPartSocial",
		        "dateStatut": "$dateStatut",
		        "choixImposition": "$choixImposition",
		        "tva":"$tva",
		        "duree":"$duree",
		        "finExerciceSocial": "$finExerciceSocial",
		        "idPersonne": "$idPersonne",
		        "idDossier": "$idDossier",
		        "idSiegeSocial": "$idSiegeSocial",
		        "idDevise": "$idDevise",
		        "idDevisePartAssocie": "$idDevisePartAssocie",
		        "NIF":"$NIF",
		        "dateNIF":"$dateNIF",
		        "STAT":"$STAT",
		        "RCS":"$RCS",
		        "dateSTAT":"$dateSTAT",
		        "dateRCS":"$dateRCS",
		        "ubi":"$ubi",
		        "activiteSecondaire": "$activiteSecondaire"
    		}]
    	}
      }
    </result>
  </query>
  
  <resource path="filter/by/districts" method="POST">
    <description/>
    <call-query href="filterByDistricts">
      <with-param name="ids" query-param="ids"/>
    </call-query>
  </resource>
  <query id="filterByDistricts" useConfig="societeDS">
    <sql>
      SELECT societe.* FROM societe 
      JOIN "siegeSocial" ss ON ss."idSiege" = societe."idSiegeSocial"
      JOIN adresse ON adresse."idAdresse" = ss."adresseSiegeSocial"
      WHERE ss."siegePrincipal" IS NULL AND adresse."idDistrict" IN (:ids) 
    </sql>
    <param type="IN" name="ids" paramType="ARRAY" sqlType="INTEGER"/>
    <result outputType="json">
      {"data": {
    		"companies": [{
    			"idSociete":$idSociete,
		        "formeJuridique": "$formeJuridique",
		        "idFormeJuridique": "$idFormeJuridique",
		        "denominationSocial": "$denominationSocial",
		        "nomCommercial": "$nomCommercial",
		        "sigle": "$sigle",
		        "objetSocial": "$objetSocial",
		        "idSecteurActivite": "$idSecteurActivite",
		        "activitePrincipal": "$activitePrincipal",
		        "activiteImportExport": "$activiteImportExport",
		        "activiteIndustrielCollecteur": "$activiteIndustrielCollecteur",
		        "activiteGrossiste": "$activiteGrossiste",
		        "capital":"$capital",
		        "montantPartSocial": "$montantPartSocial",
		        "dateStatut": "$dateStatut",
		        "choixImposition": "$choixImposition",
		        "tva":"$tva",
		        "duree":"$duree",
		        "finExerciceSocial": "$finExerciceSocial",
		        "idPersonne": "$idPersonne",
		        "idDossier": "$idDossier",
		        "idSiegeSocial": "$idSiegeSocial",
		        "idDevise": "$idDevise",
		        "idDevisePartAssocie": "$idDevisePartAssocie",
		        "NIF":"$NIF",
		        "dateNIF":"$dateNIF",
		        "STAT":"$STAT",
		        "RCS":"$RCS",
		        "dateSTAT":"$dateSTAT",
		        "dateRCS":"$dateRCS",
		        "ubi":"$ubi",
		        "activiteSecondaire": "$activiteSecondaire"
    		}]
    	}
      }
    </result>
  </query>
  
  <resource path="filter/by/commons" method="POST">
    <description/>
    <call-query href="filterByCommons">
      <with-param name="ids" query-param="ids"/>
    </call-query>
  </resource>
  <query id="filterByCommons" useConfig="societeDS">
    <sql>
      SELECT societe.* FROM societe 
      JOIN "siegeSocial" ss ON ss."idSiege" = societe."idSiegeSocial"
      JOIN adresse ON adresse."idAdresse" = ss."adresseSiegeSocial"
      WHERE ss."siegePrincipal" IS NULL AND adresse."idCommune" IN (:ids) 
    </sql>
    <param type="IN" name="ids" paramType="ARRAY" sqlType="INTEGER"/>
    <result outputType="json">
      {"data": {
    		"companies": [{
    			"idSociete":$idSociete,
		        "formeJuridique": "$formeJuridique",
		        "idFormeJuridique": "$idFormeJuridique",
		        "denominationSocial": "$denominationSocial",
		        "nomCommercial": "$nomCommercial",
		        "sigle": "$sigle",
		        "objetSocial": "$objetSocial",
		        "idSecteurActivite": "$idSecteurActivite",
		        "activitePrincipal": "$activitePrincipal",
		        "activiteImportExport": "$activiteImportExport",
		        "activiteIndustrielCollecteur": "$activiteIndustrielCollecteur",
		        "activiteGrossiste": "$activiteGrossiste",
		        "capital":"$capital",
		        "montantPartSocial": "$montantPartSocial",
		        "dateStatut": "$dateStatut",
		        "choixImposition": "$choixImposition",
		        "tva":"$tva",
		        "duree":"$duree",
		        "finExerciceSocial": "$finExerciceSocial",
		        "idPersonne": "$idPersonne",
		        "idDossier": "$idDossier",
		        "idSiegeSocial": "$idSiegeSocial",
		        "idDevise": "$idDevise",
		        "idDevisePartAssocie": "$idDevisePartAssocie",
		        "NIF":"$NIF",
		        "dateNIF":"$dateNIF",
		        "STAT":"$STAT",
		        "RCS":"$RCS",
		        "dateSTAT":"$dateSTAT",
		        "dateRCS":"$dateRCS",
		        "ubi":"$ubi",
		        "activiteSecondaire": "$activiteSecondaire"
    		}]
    	}
      }
    </result>
  </query>
  
  <resource path="filter/by/provinces" method="POST">
    <description/>
    <call-query href="filterByProvinces">
      <with-param name="ids" query-param="ids"/>
    </call-query>
  </resource>
  <query id="filterByProvinces" useConfig="societeDS">
    <sql>
      SELECT societe.* FROM societe 
      JOIN "siegeSocial" ss ON ss."idSiege" = societe."idSiegeSocial"
      JOIN adresse ON adresse."idAdresse" = ss."adresseSiegeSocial"
      WHERE ss."siegePrincipal" IS NULL AND adresse."idProvince" IN (:ids) 
    </sql>
    <param type="IN" name="ids" paramType="ARRAY" sqlType="INTEGER"/>
    <result outputType="json">
      {"data": {
    		"companies": [{
    			"idSociete":$idSociete,
		        "formeJuridique": "$formeJuridique",
		        "idFormeJuridique": "$idFormeJuridique",
		        "denominationSocial": "$denominationSocial",
		        "nomCommercial": "$nomCommercial",
		        "sigle": "$sigle",
		        "objetSocial": "$objetSocial",
		        "idSecteurActivite": "$idSecteurActivite",
		        "activitePrincipal": "$activitePrincipal",
		        "activiteImportExport": "$activiteImportExport",
		        "activiteIndustrielCollecteur": "$activiteIndustrielCollecteur",
		        "activiteGrossiste": "$activiteGrossiste",
		        "capital":"$capital",
		        "montantPartSocial": "$montantPartSocial",
		        "dateStatut": "$dateStatut",
		        "choixImposition": "$choixImposition",
		        "tva":"$tva",
		        "duree":"$duree",
		        "finExerciceSocial": "$finExerciceSocial",
		        "idPersonne": "$idPersonne",
		        "idDossier": "$idDossier",
		        "idSiegeSocial": "$idSiegeSocial",
		        "idDevise": "$idDevise",
		        "idDevisePartAssocie": "$idDevisePartAssocie",
		        "NIF":"$NIF",
		        "dateNIF":"$dateNIF",
		        "STAT":"$STAT",
		        "RCS":"$RCS",
		        "dateSTAT":"$dateSTAT",
		        "dateRCS":"$dateRCS",
		        "ubi":"$ubi",
		        "activiteSecondaire": "$activiteSecondaire"
    		}]
    	}
      }
    </result>
  </query>
  <resource path="checkDenominationSocliale" method="PUT">
    <description />
    <call-query href="checkDenominationSocliale">
      <with-param name="idSociete" query-param="idSociete" />
      <with-param name="isDenominationChecked" query-param="isDenominationChecked" />
    </call-query>
  </resource>
  <query id="checkDenominationSocliale" useConfig="societeDS">
    <sql>UPDATE societe set "isDenominationChecked" =:isDenominationChecked where "idSociete" =:idSociete</sql>
    <param type="IN" name="idSociete" paramType="SCALAR" sqlType="INTEGER"/>
    <param type="IN" name="isDenominationChecked" paramType="SCALAR" sqlType="BOOLEAN"/>
  </query>
  <!-- #USER MANAGEMENT -->
  
  <!-- FILTER -->
  <resource path="filter/by/owners" method="POST">
    <description/>
    <call-query href="filterByOwners">
      <with-param name="ids" query-param="ids"/>
    </call-query>
  </resource>
  <query id="filterByOwners" useConfig="societeDS">
    <sql>
      SELECT * FROM societe 
      WHERE "idPersonne" IN (:ids)
    </sql>
    <param type="IN" name="ids" paramType="ARRAY" sqlType="INTEGER"/>
    <result outputType="json">
      {"data": {
    		"companies": [{
    			"idSociete":$idSociete,
		        "formeJuridique": "$formeJuridique",
		        "idFormeJuridique": "$idFormeJuridique",
		        "denominationSocial": "$denominationSocial",
		        "nomCommercial": "$nomCommercial",
		        "sigle": "$sigle",
		        "objetSocial": "$objetSocial",
		        "idSecteurActivite": "$idSecteurActivite",
		        "activitePrincipal": "$activitePrincipal",
		        "activiteImportExport": "$activiteImportExport",
		        "activiteIndustrielCollecteur": "$activiteIndustrielCollecteur",
		        "activiteGrossiste": "$activiteGrossiste",
		        "capital":"$capital",
		        "montantPartSocial": "$montantPartSocial",
		        "dateStatut": "$dateStatut",
		        "choixImposition": "$choixImposition",
		        "tva":"$tva",
		        "duree":"$duree",
		        "finExerciceSocial": "$finExerciceSocial",
		        "idPersonne": "$idPersonne",
		        "idDossier": "$idDossier",
		        "idSiegeSocial": "$idSiegeSocial",
		        "idDevise": "$idDevise",
		        "idDevisePartAssocie": "$idDevisePartAssocie",
		        "NIF":"$NIF",
		        "dateNIF":"$dateNIF",
		        "STAT":"$STAT",
		        "RCS":"$RCS",
		        "dateSTAT":"$dateSTAT",
		        "dateRCS":"$dateRCS",
		        "ubi":"$ubi",
		        "activiteSecondaire": "$activiteSecondaire"
    		}]
    	}
      }
    </result>
  </query>
  <!-- #FILTER -->
  
  <!-- ASSOCIATE -->
  <resource path="person-associates/{associateId}" method="GET">
		<description />
		<call-query href="getPersonAssociateById">
			<with-param name="associateId" query-param="associateId" />
		</call-query>
	</resource>
	<query id="getPersonAssociateById" useConfig="societeDS">
	    <sql>
	    SELECT associe."idPersonne", associe."idPersonneMoral", associe."idStatutSociete"::varchar 
	    FROM  associe
	    WHERE "idAssocie" = :associateId
	    </sql>
	    <param type="IN" name="associateId " sqlType="INTEGER" paramType="SCALAR" optional="false" />
	    <result outputType="json">
	    	{
    			"associate":{
					"personId":$idPersonne,
					"moralId":$idPersonneMoral,
					"roleIds":"$idStatutSociete"
				}
			}
		</result>
  	</query>
  <!-- #ASSOCIATE -->
   <query id="addArchive" useConfig="societeDS">
    <sql>INSERT INTO public.archive(
	"fileName", "fileType", "path")
	VALUES ( :fileName, :fileType, :path);</sql>
    <param type="IN" name="path" sqlType="STRING" paramType="SCALAR" optional="false" />
    <param type="IN" name="fileName" sqlType="STRING" paramType="SCALAR" optional="false" />
    <param type="IN" name="fileType" sqlType="STRING" paramType="SCALAR" optional="false" />
    <result outputType="json">{"archives":{
 "fileName":"$fileName",
"fileType":"$fileType",
"path":"$path"
}
}</result>
  </query>
  <query id="getArchive" useConfig="societeDS">
    <sql>SELECT * FROM public.archive 		</sql>
    <param type="IN" name="path" sqlType="STRING" paramType="SCALAR" optional="false" />
    <param type="IN" name="fileName" sqlType="STRING" paramType="SCALAR" optional="false" />
    <param type="IN" name="fileType" sqlType="STRING" paramType="SCALAR" optional="false" />
    <result outputType="json">{"archives":{ "file_name":"$file_name",
"file_type":"$file_type",
"path":"$path"
}
}</result>
  </query>
</data>